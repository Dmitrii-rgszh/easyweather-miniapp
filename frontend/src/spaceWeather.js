// üåå spaceWeather.js - –†–µ–∞–ª—å–Ω–æ–µ API –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—å NOAA

// URLs NOAA Space Weather API
const NOAA_API_URLS = {
  kIndex: 'https://services.swpc.noaa.gov/json/planetary_k_index_1m.json',
  forecast: 'https://services.swpc.noaa.gov/json/3_day_forecast.json',
  alerts: 'https://services.swpc.noaa.gov/json/alerts.json',
  activity: 'https://services.swpc.noaa.gov/json/geospace_pred_est_kp_1_minute.json'
};

// –ö–µ—à –¥–ª—è API (—á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤)
let apiCache = {
  kIndex: { data: null, timestamp: 0 },
  forecast: { data: null, timestamp: 0 },
  alerts: { data: null, timestamp: 0 }
};

const CACHE_DURATION = 15 * 60 * 1000; // 15 –º–∏–Ω—É—Ç

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–µ—à–∞
function isCacheValid(cacheEntry) {
  return cacheEntry.data && (Date.now() - cacheEntry.timestamp) < CACHE_DURATION;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ Kp-–∏–Ω–¥–µ–∫—Å–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –º–∞–≥–Ω–∏—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
export async function getKpIndex() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (isCacheValid(apiCache.kIndex)) {
      console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Kp-–∏–Ω–¥–µ–∫—Å–∞');
      return apiCache.kIndex.data;
    }

    console.log('üåå –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ Kp-–∏–Ω–¥–µ–∫—Å–∞ —Å NOAA...');
    
    const response = await fetch(NOAA_API_URLS.kIndex, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const data = await response.json();
    
    if (!data || data.length === 0) {
      throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç NOAA API');
    }

    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –¥–∞–Ω–Ω—ã—Ö
    const last24Hours = data.slice(-144); // –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç * 144 = 24 —á–∞—Å–∞
    const currentReading = data[data.length - 1];
    
    const processedData = {
      current_kp: parseFloat(currentReading.kp_index) || 0,
      timestamp: currentReading.time_tag,
      trend: calculateKpTrend(last24Hours),
      activity_level: getActivityLevel(parseFloat(currentReading.kp_index)),
      last24h_max: Math.max(...last24Hours.map(item => parseFloat(item.kp_index) || 0)),
      last24h_avg: calculateAverage(last24Hours.map(item => parseFloat(item.kp_index) || 0))
    };

    // –ö–µ—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    apiCache.kIndex = {
      data: processedData,
      timestamp: Date.now()
    };

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ Kp-–∏–Ω–¥–µ–∫—Å–∞ –ø–æ–ª—É—á–µ–Ω—ã:', processedData);
    return processedData;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Kp-–∏–Ω–¥–µ–∫—Å–∞:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞, –µ—Å–ª–∏ –µ—Å—Ç—å (–¥–∞–∂–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ)
    if (apiCache.kIndex.data) {
      console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞');
      return apiCache.kIndex.data;
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    return {
      current_kp: 2,
      timestamp: new Date().toISOString(),
      trend: 'stable',
      activity_level: 'quiet',
      last24h_max: 2,
      last24h_avg: 1.5,
      error: true
    };
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –º–∞–≥–Ω–∏—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
export async function getMagneticForecast() {
  try {
    if (isCacheValid(apiCache.forecast)) {
      return apiCache.forecast.data;
    }

    const response = await fetch(NOAA_API_URLS.forecast);
    
    if (!response.ok) {
      throw new Error(`Forecast API error: ${response.status}`);
    }

    const data = await response.json();
    
    const processedForecast = data
      .filter(item => item.DateTimeISO && item.KpIndex)
      .slice(0, 8) // –°–ª–µ–¥—É—é—â–∏–µ 8 –ø–µ—Ä–∏–æ–¥–æ–≤ (24 —á–∞—Å–∞)
      .map(item => ({
        datetime: item.DateTimeISO,
        kp_predicted: parseFloat(item.KpIndex),
        activity_level: getActivityLevel(parseFloat(item.KpIndex)),
        date: new Date(item.DateTimeISO).toLocaleDateString('ru-RU'),
        time: new Date(item.DateTimeISO).toLocaleTimeString('ru-RU', { 
          hour: '2-digit', 
          minute: '2-digit' 
        })
      }));

    apiCache.forecast = {
      data: processedForecast,
      timestamp: Date.now()
    };

    return processedForecast;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞:', error);
    return [];
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –æ—Ç NOAA
export async function getSpaceWeatherAlerts() {
  try {
    if (isCacheValid(apiCache.alerts)) {
      return apiCache.alerts.data;
    }

    const response = await fetch(NOAA_API_URLS.alerts);
    
    if (!response.ok) {
      throw new Error(`Alerts API error: ${response.status}`);
    }

    const data = await response.json();
    
    const processedAlerts = data
      .filter(alert => alert.message && alert.issue_datetime)
      .map(alert => ({
        id: alert.serial_number || Date.now(),
        type: mapAlertType(alert.code),
        title: alert.message.split('\n')[0], // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        message: alert.message,
        issued: alert.issue_datetime,
        severity: mapAlertSeverity(alert.code)
      }));

    apiCache.alerts = {
      data: processedAlerts,
      timestamp: Date.now()
    };

    return processedAlerts;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤:', error);
    return [];
  }
}

// –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –ø–æ–≥–æ–¥–µ
export async function getCompleteSpaceWeather() {
  try {
    console.log('üöÄ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –ø–æ–≥–æ–¥—ã...');
    
    const [kpData, forecast, alerts] = await Promise.allSettled([
      getKpIndex(),
      getMagneticForecast(),
      getSpaceWeatherAlerts()
    ]);

    const result = {
      kp_index: kpData.status === 'fulfilled' ? kpData.value : null,
      forecast: forecast.status === 'fulfilled' ? forecast.value : [],
      alerts: alerts.status === 'fulfilled' ? alerts.value : [],
      timestamp: new Date().toISOString(),
      data_quality: {
        kp_available: kpData.status === 'fulfilled',
        forecast_available: forecast.status === 'fulfilled',
        alerts_available: alerts.status === 'fulfilled'
      }
    };

    console.log('‚úÖ –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –ø–æ–≥–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞:', result);
    return result;

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –ø–æ–≥–æ–¥—ã:', error);
    return null;
  }
}

// ============ –£–¢–ò–õ–ò–¢–´ ============

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ Kp-–∏–Ω–¥–µ–∫—Å—É
function getActivityLevel(kp) {
  if (kp === null || kp === undefined || isNaN(kp)) return 'unknown';
  
  if (kp < 4) return 'quiet';
  if (kp < 5) return 'unsettled';  
  if (kp < 6) return 'active';
  if (kp < 7) return 'minor_storm';
  if (kp < 8) return 'moderate_storm';
  if (kp < 9) return 'strong_storm';
  return 'severe_storm';
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
export function getActivityLevelRu(level) {
  const levels = {
    'quiet': '–°–ø–æ–∫–æ–π–Ω–∞—è',
    'unsettled': '–ù–µ—É—Å—Ç–æ–π—á–∏–≤–∞—è', 
    'active': '–ê–∫—Ç–∏–≤–Ω–∞—è',
    'minor_storm': '–°–ª–∞–±–∞—è –±—É—Ä—è',
    'moderate_storm': '–£–º–µ—Ä–µ–Ω–Ω–∞—è –±—É—Ä—è',
    'strong_storm': '–°–∏–ª—å–Ω–∞—è –±—É—Ä—è',
    'severe_storm': '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –±—É—Ä—è',
    'unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
  };
  return levels[level] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

// –†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞ Kp-–∏–Ω–¥–µ–∫—Å–∞
function calculateKpTrend(data) {
  if (!data || data.length < 12) return 'stable'; // –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —á–∞—Å–∞ –¥–∞–Ω–Ω—ã—Ö
  
  const recent = data.slice(-12); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞
  const earlier = data.slice(-24, -12); // –ü—Ä–µ–¥—ã–¥—É—â–∏–µ 2 —á–∞—Å–∞
  
  const recentAvg = calculateAverage(recent.map(item => parseFloat(item.kp_index) || 0));
  const earlierAvg = calculateAverage(earlier.map(item => parseFloat(item.kp_index) || 0));
  
  const difference = recentAvg - earlierAvg;
  
  if (difference > 0.5) return 'rising';
  if (difference < -0.5) return 'falling';
  return 'stable';
}

// –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
function calculateAverage(numbers) {
  if (!numbers || numbers.length === 0) return 0;
  return numbers.reduce((sum, num) => sum + num, 0) / numbers.length;
}

// –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –∞–ª–µ—Ä—Ç–æ–≤
function mapAlertType(code) {
  if (!code) return 'info';
  
  const typeMap = {
    'ALTK04': 'geomagnetic_storm',
    'WARK04': 'geomagnetic_warning', 
    'ALTEF': 'solar_flare',
    'WARPC': 'proton_event',
    'SUMX01': 'summary'
  };
  
  return typeMap[code] || 'general';
}

// –ú–∞–ø–ø–∏–Ω–≥ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –∞–ª–µ—Ä—Ç–æ–≤
function mapAlertSeverity(code) {
  if (!code) return 'info';
  
  if (code.includes('WAR')) return 'warning';
  if (code.includes('ALT')) return 'alert';
  if (code.includes('SUM')) return 'info';
  
  return 'info';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
export async function testSpaceWeatherAPI() {
  if (process.env.NODE_ENV !== 'development') {
    console.warn('‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
    return;
  }
  
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º NOAA Space Weather API...');
  
  try {
    const kp = await getKpIndex();
    console.log('üìä Kp-–∏–Ω–¥–µ–∫—Å:', kp);
    
    const forecast = await getMagneticForecast();
    console.log('üîÆ –ü—Ä–æ–≥–Ω–æ–∑:', forecast);
    
    const alerts = await getSpaceWeatherAlerts();
    console.log('üö® –ê–ª–µ—Ä—Ç—ã:', alerts);
    
    console.log('‚úÖ –í—Å–µ API —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:', error);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
if (process.env.NODE_ENV === 'development') {
  window.testSpaceWeather = testSpaceWeatherAPI;
}