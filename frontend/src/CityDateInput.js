// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π CityDateInput.js —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
import React, { useState } from "react";
import { TextField, Button, Popover } from "@mui/material";
import CalendarMonthIcon from '@mui/icons-material/CalendarMonth';
import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { ru } from 'date-fns/locale';
import analytics from './analytics'; // üÜï –î–û–ë–ê–í–õ–ï–ù–ê –ê–ù–ê–õ–ò–¢–ò–ö–ê

function formatDate(date) {
  if (!date) return "";
  return date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' });
}

export default function CityDateInput({ 
  city, 
  setCity, 
  date, 
  setDate, 
  disabled, 
  onWeatherSearch, // üÜï –î–û–ë–ê–í–ò–õ–ò PROP –î–õ–Ø –ü–û–ò–°–ö–ê –ü–û–ì–û–î–´
  onLocationSearch // üÜï –î–û–ë–ê–í–ò–õ–ò PROP –î–õ–Ø –ì–ï–û–õ–û–ö–ê–¶–ò–ò
}) {
  const [anchorEl, setAnchorEl] = useState(null);

  const handleDateClick = (event) => setAnchorEl(event.currentTarget);
  const handleClose = () => setAnchorEl(null);

  // üÜï –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ê–ñ–ê–¢–ò–Ø ENTER –í –ü–û–õ–ï –í–í–û–î–ê
  const handleKeyPress = (event) => {
    if (event.key === 'Enter' && city.trim()) {
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ–≥–æ–¥—ã
      analytics.trackWeatherSearch(city.trim(), 'manual_input');
      
      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –µ—Å–ª–∏ –æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞
      if (onWeatherSearch) {
        onWeatherSearch(city.trim());
      }
    }
  };

  // üÜï –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ì–û–†–û–î–ê
  const handleCityChange = (e) => {
    const newCity = e.target.value;
    setCity(newCity);
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤–≤–æ–¥ –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
    if (newCity.length > 2) {
      analytics.trackAction('city_input', { 
        city: newCity, 
        length: newCity.length 
      });
    }
  };

  // üÜï –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–ó–ú–ï–ù–ï–ù–ò–Ø –î–ê–¢–´
  const handleDateChange = (newValue) => {
    setDate(newValue);
    handleClose();
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã
    analytics.trackAction('date_change', { 
      date: newValue ? newValue.toISOString() : null,
      formatted_date: formatDate(newValue)
    });
  };

  return (
    <div style={{ display: "flex", alignItems: "center", gap: 8, marginBottom: 20, zIndex: 99 }}>
      <TextField
        value={city}
        onChange={handleCityChange} // üÜï –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
        onKeyPress={handleKeyPress} // üÜï –î–û–ë–ê–í–ò–õ–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö ENTER
        variant="outlined"
        size="medium"
        fullWidth
        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞" // üÜï –î–û–ë–ê–í–ò–õ–ò PLACEHOLDER
        sx={{
          background: "#fff",
          borderRadius: '12px !important', // –£—Å–∏–ª–∏–≤–∞–µ–º border-radius
          height: 46,
          fontFamily: "Montserrat",
          // –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞–Ω–Ω—ã–µ —É–≥–ª—ã –∏ —Ç–µ–Ω–∏
          '& .MuiInputBase-root': { 
            height: 52,
            borderRadius: '12px !important', // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ –≤—Å–µ–º—É –ø–æ–ª—é
            boxShadow: 'none !important', // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Ç–µ–Ω–∏
            overflow: 'hidden' // –û–±—Ä–µ–∑–∞–µ–º –≤—Å–µ —á—Ç–æ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
          },
          '& .MuiInputBase-input': {
            textAlign: "center",
            fontWeight: 500,
            fontSize: 20,
            color: "#232942",
            height: "46px !important",
            padding: "0 10px",
            fontFamily: "Montserrat",
            borderRadius: '12px !important' // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ —Å–∞–º–æ–º—É input
          },
          '& .MuiOutlinedInput-notchedOutline': {
            borderColor: "white",
            borderRadius: '12px !important', // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ —Ä–∞–º–∫–µ
            boxShadow: 'none !important' // –£–±–∏—Ä–∞–µ–º —Ç–µ–Ω–∏ –æ—Ç —Ä–∞–º–∫–∏
          },
          // –£–±–∏—Ä–∞–µ–º —É–≥–ª—ã –≤–æ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
          '& .MuiOutlinedInput-root': {
            borderRadius: '12px !important',
            '& fieldset': {
              borderRadius: '12px !important',
              boxShadow: 'none !important'
            },
            '&:hover fieldset': {
              borderRadius: '12px !important',
              boxShadow: 'none !important'
            },
            '&.Mui-focused fieldset': {
              borderRadius: '12px !important',
              boxShadow: 'none !important'
            }
          }
        }}
        InputProps={{
          style: { 
            textAlign: "center", 
            fontFamily: "Montserrat",
            borderRadius: '12px', // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ
            boxShadow: 'none' // –£–±–∏—Ä–∞–µ–º —Ç–µ–Ω–∏
          }
        }}
        disabled={disabled}
      />
      <Button
        variant="outlined"
        onClick={handleDateClick}
        startIcon={<CalendarMonthIcon />}
        sx={{
          minWidth: 88,
          height: 46,
          fontWeight: 500,
          background: "rgba(255, 255, 255, 0.16)",
          borderColor: "primary",
          color: "primary",
          borderRadius: '12px !important', // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —É–≥–ª—ã –∫–Ω–æ–ø–∫–∏
          border: "1.5px solid rgb(0, 153, 255)",
          fontFamily: "Montserrat",
          zIndex: 99,
          boxShadow: 'none !important', // –£–±–∏—Ä–∞–µ–º —Ç–µ–Ω–∏ –∫–Ω–æ–ø–∫–∏
          // –£–±–∏—Ä–∞–µ–º —É–≥–ª—ã –≤–æ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –∫–Ω–æ–ø–∫–∏
          '&:hover': {
            borderRadius: '12px !important',
            boxShadow: 'none !important'
          },
          '&:focus': {
            borderRadius: '12px !important',
            boxShadow: 'none !important'
          },
          '&:active': {
            borderRadius: '12px !important',
            boxShadow: 'none !important'
          }
        }}
        disabled={disabled}
      >
        {formatDate(date)}
      </Button>
      <Popover
        open={Boolean(anchorEl)}
        anchorEl={anchorEl}
        onClose={handleClose}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}
      >
        <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={ru}>
          <DatePicker
            disablePast={false}
            value={date}
            onChange={handleDateChange} // üÜï –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
            slotProps={{
              textField: { size: 'small', sx: { m: 1 } },
            }}
          />
        </LocalizationProvider>
      </Popover>
    </div>
  );
}
