// Achievements.js —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π –±–ª–æ–∫–æ–≤

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

// –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –æ—á–∫–æ–≤
const ACHIEVEMENTS = {
  firstCheck: {
    id: 'firstCheck',
    title: '–ù–æ–≤–∏—á–æ–∫',
    description: '–ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≥–æ–¥—ã',
    icon: 'üå§Ô∏è',
    points: 10,
    condition: (stats) => stats.totalChecks >= 1
  },
  weekStreak: {
    id: 'weekStreak',
    title: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π',
    description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    icon: 'üìÖ',
    points: 50,
    condition: (stats) => stats.consecutiveDays >= 7
  },
  monthStreak: {
    id: 'monthStreak',
    title: '–ú–µ—Ç–µ–æ—Ä–æ–ª–æ–≥',
    description: '30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    icon: 'üå¶Ô∏è',
    points: 200,
    condition: (stats) => stats.consecutiveDays >= 30
  },
  extremeWeather: {
    id: 'extremeWeather',
    title: '–ü–æ–≥–æ–¥–Ω—ã–π –≤–æ–∏–Ω',
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É',
    icon: '‚õàÔ∏è',
    points: 25,
    condition: (stats) => stats.extremeWeatherChecks >= 1
  },
  earlyBird: {
    id: 'earlyBird',
    title: '–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞',
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ 7 —É—Ç—Ä–∞',
    icon: 'üåÖ',
    points: 15,
    condition: (stats) => stats.earlyChecks >= 5
  },
  nightOwl: {
    id: 'nightOwl',
    title: '–ü–æ–ª—É–Ω–æ—á–Ω–∏–∫',
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ 11 –≤–µ—á–µ—Ä–∞',
    icon: 'üåô',
    points: 15,
    condition: (stats) => stats.lateChecks >= 5
  }
};

// –£—Ä–æ–≤–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const USER_LEVELS = [
  { level: 1, title: '–ù–æ–≤–∏—á–æ–∫', minPoints: 0, icon: 'üå±', color: '#10b981' },
  { level: 2, title: '–õ—é–±–∏—Ç–µ–ª—å', minPoints: 50, icon: '‚òÄÔ∏è', color: '#f59e0b' },
  { level: 3, title: '–≠–Ω—Ç—É–∑–∏–∞—Å—Ç', minPoints: 150, icon: 'üå§Ô∏è', color: '#3b82f6' },
  { level: 4, title: '–≠–∫—Å–ø–µ—Ä—Ç', minPoints: 300, icon: '‚õÖ', color: '#8b5cf6' },
  { level: 5, title: '–ú–µ—Ç–µ–æ—Ä–æ–ª–æ–≥', minPoints: 500, icon: 'üå¶Ô∏è', color: '#ec4899' },
  { level: 6, title: '–ú–∞—Å—Ç–µ—Ä –ø–æ–≥–æ–¥—ã', minPoints: 1000, icon: '‚õàÔ∏è', color: '#ef4444' }
];

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
const getGameStats = () => {
  const saved = localStorage.getItem('gameProgress');
  if (saved) {
    try {
      return JSON.parse(saved);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', e);
    }
  }
  
  return {
    totalPoints: 0,
    totalChecks: 0,
    consecutiveDays: 0,
    lastCheckDate: null,
    unlockedAchievements: [],
    extremeWeatherChecks: 0,
    earlyChecks: 0,
    lateChecks: 0
  };
};

const saveGameStats = (stats) => {
  try {
    localStorage.setItem('gameProgress', JSON.stringify(stats));
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    window.dispatchEvent(new CustomEvent('statsUpdated', { detail: stats }));
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', e);
  }
};

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–≥–æ–¥—ã
const recordWeatherCheck = (weather) => {
  const stats = getGameStats();
  const now = new Date();
  const today = now.toDateString();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  stats.totalChecks += 1;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏
  if (stats.lastCheckDate) {
    const lastDate = new Date(stats.lastCheckDate);
    const daysDiff = Math.floor((now - lastDate) / (1000 * 60 * 60 * 24));
    
    if (daysDiff === 1) {
      stats.consecutiveDays += 1;
    } else if (daysDiff > 1) {
      stats.consecutiveDays = 1;
    }
  } else {
    stats.consecutiveDays = 1;
  }
  
  stats.lastCheckDate = today;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É
  if (weather && (weather.temp < -15 || weather.temp > 35 || weather.wind_speed > 15)) {
    stats.extremeWeatherChecks += 1;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
  const hour = now.getHours();
  if (hour < 7) {
    stats.earlyChecks += 1;
  } else if (hour >= 23) {
    stats.lateChecks += 1;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  checkAchievements(stats);
  
  saveGameStats(stats);
  return stats;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const checkAchievements = (stats) => {
  Object.values(ACHIEVEMENTS).forEach(achievement => {
    if (!stats.unlockedAchievements.includes(achievement.id) && achievement.condition(stats)) {
      stats.unlockedAchievements.push(achievement.id);
      stats.totalPoints += achievement.points;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      setTimeout(() => {
        window.dispatchEvent(new CustomEvent('newAchievement', { 
          detail: { achievement: achievement.id } 
        }));
      }, 1000);
    }
  });
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserLevel = (points) => {
  for (let i = USER_LEVELS.length - 1; i >= 0; i--) {
    if (points >= USER_LEVELS[i].minPoints) {
      return USER_LEVELS[i];
    }
  }
  return USER_LEVELS[0];
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
const getProgressToNextLevel = (points) => {
  const currentLevel = getUserLevel(points);
  const nextLevel = USER_LEVELS.find(level => level.minPoints > points);
  
  if (!nextLevel) {
    return { progress: 100, pointsNeeded: 0, nextLevel: null };
  }
  
  const pointsInCurrentLevel = points - currentLevel.minPoints;
  const pointsNeededForNextLevel = nextLevel.minPoints - currentLevel.minPoints;
  const progress = Math.min(100, (pointsInCurrentLevel / pointsNeededForNextLevel) * 100);
  
  return {
    progress,
    pointsNeeded: nextLevel.minPoints - points,
    nextLevel
  };
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
const AchievementNotification = ({ achievement, onClose }) => {
  useEffect(() => {
    const timer = setTimeout(onClose, 4000);
    return () => clearTimeout(timer);
  }, [onClose]);

  if (!achievement) return null;

  const achievementData = ACHIEVEMENTS[achievement];

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.8, y: 50 }}
      animate={{ opacity: 1, scale: 1, y: 0 }}
      exit={{ opacity: 0, scale: 0.8, y: -50 }}
      style={{
        position: 'fixed',
        top: 80,
        right: 16,
        background: 'linear-gradient(135deg, #10b981, #34d399)',
        color: 'white',
        padding: 16,
        borderRadius: 12,
        boxShadow: '0 8px 32px rgba(0,0,0,0.2)',
        zIndex: 9999,
        maxWidth: 280,
        fontFamily: 'Montserrat, Arial, sans-serif'
      }}
    >
      <div style={{ display: 'flex', alignItems: 'center', marginBottom: 8 }}>
        <span style={{ fontSize: 24, marginRight: 8 }}>{achievementData.icon}</span>
        <div>
          <div style={{ fontWeight: 600, fontSize: 14 }}>–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!</div>
          <div style={{ fontSize: 16, fontWeight: 700 }}>{achievementData.title}</div>
        </div>
      </div>
      <div style={{ fontSize: 12, opacity: 0.9, marginBottom: 8 }}>
        {achievementData.description}
      </div>
      <div style={{ 
        background: 'rgba(255,255,255,0.2)', 
        padding: '4px 8px', 
        borderRadius: 6, 
        fontSize: 12,
        fontWeight: 600,
        textAlign: 'center'
      }}>
        +{achievementData.points} –æ—á–∫–æ–≤! üéâ
      </div>
    </motion.div>
  );
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const Achievements = ({ stats }) => {
  const [showDetails, setShowDetails] = useState(false);
  const userLevel = getUserLevel(stats.totalPoints);
  const levelProgress = getProgressToNextLevel(stats.totalPoints);
  
  const unlockedCount = stats.unlockedAchievements.length;
  const totalCount = Object.keys(ACHIEVEMENTS).length;

  return (
    <div style={{
      background: 'rgba(255, 255, 255, 0.95)',
      backdropFilter: 'blur(20px)',
      borderRadius: 16,
      padding: 16,
      margin: "16px auto 0", // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–µ–ø–µ—Ä—å –∫–∞–∫ —É –¥—Ä—É–≥–∏—Ö –±–ª–æ–∫–æ–≤
      maxWidth: 340, // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –∫–∞–∫ —É –¥—Ä—É–≥–∏—Ö –±–ª–æ–∫–æ–≤
      width: "100%", // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –≤ —Ä–∞–º–∫–∞—Ö maxWidth
      boxSizing: "border-box", // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤
      boxShadow: '0 8px 32px rgba(0,0,0,0.1)',
      border: '1px solid rgba(255,255,255,0.3)'
    }}>
      <div style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: 12
      }}>
        <h3 style={{
          margin: 0,
          fontSize: 18,
          fontWeight: 600,
          color: '#1e293b',
          fontFamily: 'Montserrat, Arial, sans-serif'
        }}>
          {userLevel.icon} –ü—Ä–æ–≥—Ä–µ—Å—Å
        </h3>
        
        <motion.button
          onClick={() => setShowDetails(!showDetails)}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          style={{
            background: 'linear-gradient(135deg, #3b82f6, #60a5fa)',
            color: 'white',
            border: 'none',
            borderRadius: 8,
            padding: '6px 12px',
            fontSize: 12,
            fontWeight: 600,
            cursor: 'pointer',
            fontFamily: 'Montserrat, Arial, sans-serif'
          }}
        >
          {showDetails ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–¥—Ä–æ–±–Ω–µ–µ'}
        </motion.button>
      </div>

      {/* –£—Ä–æ–≤–µ–Ω—å –∏ –æ—á–∫–∏ */}
      <div style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: 12
      }}>
        <div>
          <div style={{
            fontSize: 14,
            fontWeight: 700,
            color: userLevel.color,
            fontFamily: 'Montserrat, Arial, sans-serif'
          }}>
            {userLevel.title} (–£—Ä–æ–≤–µ–Ω—å {userLevel.level})
          </div>
          <div style={{
            fontSize: 12,
            color: '#64748b',
            fontFamily: 'Montserrat, Arial, sans-serif'
          }}>
            {stats.totalPoints} –æ—á–∫–æ–≤
          </div>
        </div>
        
        <div style={{
          textAlign: 'right'
        }}>
          <div style={{
            fontSize: 12,
            color: '#64748b',
            fontFamily: 'Montserrat, Arial, sans-serif'
          }}>
            –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
          </div>
          <div style={{
            fontSize: 14,
            fontWeight: 600,
            color: '#1e293b',
            fontFamily: 'Montserrat, Arial, sans-serif'
          }}>
            {unlockedCount}/{totalCount}
          </div>
        </div>
      </div>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è */}
      {levelProgress.nextLevel && (
        <div style={{ marginBottom: 12 }}>
          <div style={{
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            marginBottom: 4
          }}>
            <span style={{
              fontSize: 10,
              color: '#64748b',
              fontFamily: 'Montserrat, Arial, sans-serif'
            }}>
              –î–æ {levelProgress.nextLevel.title}
            </span>
            <span style={{
              fontSize: 10,
              color: '#64748b',
              fontFamily: 'Montserrat, Arial, sans-serif'
            }}>
              {levelProgress.pointsNeeded} –æ—á–∫–æ–≤
            </span>
          </div>
          
          <div style={{
            width: '100%',
            height: 6,
            background: 'rgba(0,0,0,0.1)',
            borderRadius: 3,
            overflow: 'hidden'
          }}>
            <motion.div
              initial={{ width: 0 }}
              animate={{ width: `${levelProgress.progress}%` }}
              transition={{ duration: 1, ease: "easeOut" }}
              style={{
                height: '100%',
                background: `linear-gradient(90deg, ${userLevel.color}, ${levelProgress.nextLevel.color})`,
                borderRadius: 3
              }}
            />
          </div>
        </div>
      )}

      {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <AnimatePresence>
        {showDetails && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.3 }}
            style={{ paddingTop: 12, borderTop: '1px solid rgba(0,0,0,0.1)' }}
          >
            <div style={{ marginBottom: 12 }}>
              <div style={{
                fontSize: 12,
                fontWeight: 600,
                color: '#1e293b',
                marginBottom: 8,
                fontFamily: 'Montserrat, Arial, sans-serif'
              }}>
                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
              </div>
              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 8 }}>
                <div style={{ textAlign: 'center', padding: 8, background: 'rgba(59, 130, 246, 0.1)', borderRadius: 8 }}>
                  <div style={{ fontSize: 18, fontWeight: 700, color: '#3b82f6' }}>{stats.totalChecks}</div>
                  <div style={{ fontSize: 10, color: '#64748b' }}>–ü—Ä–æ–≤–µ—Ä–æ–∫</div>
                </div>
                <div style={{ textAlign: 'center', padding: 8, background: 'rgba(16, 185, 129, 0.1)', borderRadius: 8 }}>
                  <div style={{ fontSize: 18, fontWeight: 700, color: '#10b981' }}>{stats.consecutiveDays}</div>
                  <div style={{ fontSize: 10, color: '#64748b' }}>–î–Ω–µ–π –ø–æ–¥—Ä—è–¥</div>
                </div>
              </div>

              <div style={{ marginBottom: 12 }}>
                <div style={{
                  fontSize: 12,
                  fontWeight: 600,
                  color: '#1e293b',
                  marginBottom: 8,
                  fontFamily: 'Montserrat, Arial, sans-serif'
                }}>
                  –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:
                </div>
                <div style={{
                  display: 'grid',
                  gridTemplateColumns: 'repeat(4, 1fr)',
                  gap: 6
                }}>
                  {Object.values(ACHIEVEMENTS).map(achievement => {
                    const isUnlocked = stats.unlockedAchievements.includes(achievement.id);
                    return (
                      <div
                        key={achievement.id}
                        style={{
                          textAlign: 'center',
                          padding: 6,
                          borderRadius: 8,
                          background: isUnlocked 
                            ? 'rgba(16, 185, 129, 0.15)' 
                            : 'rgba(0, 0, 0, 0.05)',
                          opacity: isUnlocked ? 1 : 0.5
                        }}
                      >
                        <div style={{ fontSize: 16, marginBottom: 2 }}>
                          {achievement.icon}
                        </div>
                        <div style={{
                          fontSize: 8,
                          fontWeight: 600,
                          color: isUnlocked ? '#10b981' : '#64748b',
                          fontFamily: 'Montserrat, Arial, sans-serif'
                        }}>
                          {achievement.title}
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-–æ–±–µ—Ä—Ç–∫–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
export default function AchievementsSystem() {
  const [stats, setStats] = useState(getGameStats());
  const [notification, setNotification] = useState(null);

  // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  useEffect(() => {
    const handleNewAchievement = (event) => {
      setNotification(event.detail.achievement);
    };

    window.addEventListener('newAchievement', handleNewAchievement);
    return () => window.removeEventListener('newAchievement', handleNewAchievement);
  }, []);

  useEffect(() => {
    const handleStatsUpdate = () => {
      setStats(getGameStats());
    };

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    window.addEventListener('statsUpdated', handleStatsUpdate);
    
    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const handleNewAchievement = (event) => {
      setNotification(event.detail.achievement);
      setStats(getGameStats()); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    };

    window.addEventListener('newAchievement', handleNewAchievement);
    
    return () => {
      window.removeEventListener('newAchievement', handleNewAchievement);
      window.removeEventListener('statsUpdated', handleStatsUpdate);
    };
  }, []);

  return (
    <>
      <Achievements stats={stats} />
      
      <AnimatePresence>
        {notification && (
          <AchievementNotification
            achievement={notification}
            onClose={() => setNotification(null)}
          />
        )}
      </AnimatePresence>
    </>
  );
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export { recordWeatherCheck, getGameStats, Achievements, AchievementNotification };