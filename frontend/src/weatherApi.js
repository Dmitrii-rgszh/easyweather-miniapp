const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;

// üÜï –°–ò–°–¢–ï–ú–ê –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
const weatherCache = {
  current: {},
  forecast: {},
  airQuality: {},
  uvIndex: {}
};

// –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ (5 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã)
const CACHE_DURATION = {
  current: 5 * 60 * 1000,      // 5 –º–∏–Ω—É—Ç
  forecast: 30 * 60 * 1000,    // 30 –º–∏–Ω—É—Ç
  airQuality: 30 * 60 * 1000,  // 30 –º–∏–Ω—É—Ç
  uvIndex: 30 * 60 * 1000      // 30 –º–∏–Ω—É—Ç
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞
function createCacheKey(query) {
  if (typeof query === 'string') {
    return query.toLowerCase().trim();
  } else if (typeof query === 'object' && query.lat && query.lon) {
    // –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
    return `${Math.round(query.lat * 100) / 100},${Math.round(query.lon * 100) / 100}`;
  }
  return 'unknown';
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
function isCacheValid(cacheEntry, maxAge) {
  return cacheEntry && 
         cacheEntry.timestamp && 
         (Date.now() - cacheEntry.timestamp) < maxAge;
}

// üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
export async function fetchWeather(query) {
  const cacheKey = createCacheKey(query);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  if (isCacheValid(weatherCache.current[cacheKey], CACHE_DURATION.current)) {
    console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã –¥–ª—è:', cacheKey);
    return weatherCache.current[cacheKey].data;
  }

  let url = '';
  if (typeof query === 'string') {
    url = `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(query)}&appid=${API_KEY}&lang=ru&units=metric`;
  } else if (typeof query === 'object' && query.lat && query.lon) {
    url = `https://api.openweathermap.org/data/2.5/weather?lat=${query.lat}&lon=${query.lon}&appid=${API_KEY}&lang=ru&units=metric`;
  } else {
    throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å');
  }

  console.log('üåê –ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è:', cacheKey);
  const res = await fetch(url);
  if (!res.ok) throw new Error('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
  
  const data = await res.json();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
  weatherCache.current[cacheKey] = {
    data: data,
    timestamp: Date.now()
  };
  
  return data;
}

// üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
export async function fetchForecast(query) {
  const cacheKey = createCacheKey(query);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  if (isCacheValid(weatherCache.forecast[cacheKey], CACHE_DURATION.forecast)) {
    console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è:', cacheKey);
    return weatherCache.forecast[cacheKey].data;
  }

  let url = '';
  if (typeof query === 'string') {
    url = `https://api.openweathermap.org/data/2.5/forecast?q=${encodeURIComponent(query)}&appid=${API_KEY}&lang=ru&units=metric`;
  } else if (typeof query === 'object' && query.lat && query.lon) {
    url = `https://api.openweathermap.org/data/2.5/forecast?lat=${query.lat}&lon=${query.lon}&appid=${API_KEY}&lang=ru&units=metric`;
  } else {
    throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å');
  }

  console.log('üåê –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥–Ω–æ–∑–∞ –∫ API –¥–ª—è:', cacheKey);
  const res = await fetch(url);
  if (!res.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑');
  
  const data = await res.json();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
  weatherCache.forecast[cacheKey] = {
    data: data,
    timestamp: Date.now()
  };
  
  return data;
}

// üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞
export async function fetchAirQuality(query) {
  let lat, lon;
  
  if (typeof query === 'string') {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    const weatherData = await fetchWeather(query);
    lat = weatherData.coord.lat;
    lon = weatherData.coord.lon;
  } else if (typeof query === 'object' && query.lat && query.lon) {
    lat = query.lat;
    lon = query.lon;
  } else {
    throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å');
  }

  const cacheKey = `${Math.round(lat * 100) / 100},${Math.round(lon * 100) / 100}`;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  if (isCacheValid(weatherCache.airQuality[cacheKey], CACHE_DURATION.airQuality)) {
    console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –¥–ª—è:', cacheKey);
    return weatherCache.airQuality[cacheKey].data;
  }

  const url = `https://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${API_KEY}`;
  
  try {
    console.log('üåê –ó–∞–ø—Ä–æ—Å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ –∫ API –¥–ª—è:', cacheKey);
    const res = await fetch(url);
    if (!res.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞');
    
    const data = await res.json();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    weatherCache.airQuality[cacheKey] = {
      data: data,
      timestamp: Date.now()
    };
    
    return data;
  } catch (error) {
    console.error('Air quality error:', error);
    throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞');
  }
}

// üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è UV –∏–Ω–¥–µ–∫—Å–∞  
export async function fetchUVIndex(query) {
  let lat, lon;
  
  if (typeof query === 'string') {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    const weatherData = await fetchWeather(query);
    lat = weatherData.coord.lat;
    lon = weatherData.coord.lon;
  } else if (typeof query === 'object' && query.lat && query.lon) {
    lat = query.lat;
    lon = query.lon;
  } else {
    throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å');
  }

  const cacheKey = `${Math.round(lat * 100) / 100},${Math.round(lon * 100) / 100}`;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  if (isCacheValid(weatherCache.uvIndex[cacheKey], CACHE_DURATION.uvIndex)) {
    console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π UV –∏–Ω–¥–µ–∫—Å –¥–ª—è:', cacheKey);
    return weatherCache.uvIndex[cacheKey].data;
  }

  const url = `https://api.openweathermap.org/data/2.5/uvi?lat=${lat}&lon=${lon}&appid=${API_KEY}`;
  
  try {
    console.log('üåê –ó–∞–ø—Ä–æ—Å UV –∏–Ω–¥–µ–∫—Å–∞ –∫ API –¥–ª—è:', cacheKey);
    const res = await fetch(url);
    if (!res.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å UV –∏–Ω–¥–µ–∫—Å');
    
    const data = await res.json();
    
    // üîß –ó–ê–í–ï–†–®–ê–ï–ú –û–ë–†–ï–ó–ê–ù–ù–£–Æ –ß–ê–°–¢–¨
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    weatherCache.uvIndex[cacheKey] = {
      data: data,
      timestamp: Date.now()
    };
    
    return data;
  } catch (error) {
    console.error('UV index error:', error);
    throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è UV –∏–Ω–¥–µ–∫—Å–∞');
  }
}

// üÜï –§–£–ù–ö–¶–ò–Ø –û–ß–ò–°–¢–ö–ò –£–°–¢–ê–†–ï–í–®–ï–ì–û –ö–≠–®–ê
export function clearOldCache() {
  const now = Date.now();
  
  Object.keys(weatherCache).forEach(cacheType => {
    const maxAge = CACHE_DURATION[cacheType] || CACHE_DURATION.current;
    
    Object.keys(weatherCache[cacheType]).forEach(key => {
      if (!isCacheValid(weatherCache[cacheType][key], maxAge)) {
        delete weatherCache[cacheType][key];
      }
    });
  });
  
  console.log('üßπ –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à –æ—á–∏—â–µ–Ω');
}

// üÜï –§–£–ù–ö–¶–ò–Ø –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ô –û–ß–ò–°–¢–ö–ò –ö–≠–®–ê (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
export function clearAllCache() {
  Object.keys(weatherCache).forEach(cacheType => {
    weatherCache[cacheType] = {};
  });
  console.log('üßπ –í–µ—Å—å –∫—ç—à –æ—á–∏—â–µ–Ω');
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
if (typeof window !== 'undefined') {
  setInterval(clearOldCache, 10 * 60 * 1000);
}