// üîó useHealthIntegration.js - –•—É–∫ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–¥–æ—Ä–æ–≤—å—è —Å App.js

import { useState, useEffect } from 'react';
import { analyzeWeatherForHealth } from '../utils/healthAnalysis';

export function useHealthIntegration(weather, userProfile, forecast) {
  const [healthAlerts, setHealthAlerts] = useState([]);
  const [healthLoading, setHealthLoading] = useState(false);
  const [healthError, setHealthError] = useState(null);
  const [lastHealthUpdate, setLastHealthUpdate] = useState(null);

  useEffect(() => {
    if (!weather || !userProfile?.health?.length) {
      setHealthAlerts([]);
      return;
    }

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–¥–æ—Ä–æ–≤
    if (userProfile.health.includes('healthy') && userProfile.health.length === 1) {
      setHealthAlerts([]);
      return;
    }

    const analyzeHealth = async () => {
      setHealthLoading(true);
      setHealthError(null);

      try {
        console.log('üîó useHealthIntegration: –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∑–¥–æ—Ä–æ–≤—å—è');
        
        const alerts = await analyzeWeatherForHealth(weather, userProfile, forecast);
        
        setHealthAlerts(alerts);
        setLastHealthUpdate(new Date());
        
        console.log('‚úÖ useHealthIntegration: –ü–æ–ª—É—á–µ–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤:', alerts.length);
        
      } catch (error) {
        console.error('‚ùå useHealthIntegration: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
        setHealthError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ');
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –±–µ–∑ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—å
        try {
          const basicAlerts = await analyzeWeatherForHealth(weather, userProfile, []);
          setHealthAlerts(basicAlerts);
        } catch (basicError) {
          console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–¥–æ—Ä–æ–≤—å—è:', basicError);
          setHealthAlerts([]);
        }
        
      } finally {
        setHealthLoading(false);
      }
    };

    // –î–µ–±–∞—É–Ω—Å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const timeoutId = setTimeout(analyzeHealth, 500);
    
    return () => clearTimeout(timeoutId);
    
  }, [weather, userProfile, forecast]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
  const getCriticalAlerts = () => {
    return healthAlerts.filter(alert => alert.type === 'critical');
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
  const getWarningAlerts = () => {
    return healthAlerts.filter(alert => alert.type === 'warning');
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
  const getInfoAlerts = () => {
    return healthAlerts.filter(alert => alert.type === 'info');
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞
  const hasHealthAlerts = () => {
    return healthAlerts.length > 0;
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getHealthSummary = () => {
    if (!hasHealthAlerts()) {
      return {
        status: 'good',
        message: '–ü–æ–≥–æ–¥–∞ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è',
        icon: '‚úÖ'
      };
    }

    const critical = getCriticalAlerts();
    const warnings = getWarningAlerts();

    if (critical.length > 0) {
      return {
        status: 'critical',
        message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫: ${critical[0].title}`,
        icon: 'üö®',
        count: critical.length
      };
    }

    if (warnings.length > 0) {
      return {
        status: 'warning',
        message: `–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ${warnings[0].title}`,
        icon: '‚ö†Ô∏è',
        count: warnings.length
      };
    }

    return {
      status: 'info',
      message: `–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ${healthAlerts[0].title}`,
      icon: 'üí°',
      count: healthAlerts.length
    };
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—å
  const hasMagneticStormAlert = () => {
    return healthAlerts.some(alert => 
      alert.id.includes('magnetic') || alert.id.includes('storm')
    );
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const getHealthStats = () => {
    return {
      totalAlerts: healthAlerts.length,
      criticalCount: getCriticalAlerts().length,
      warningCount: getWarningAlerts().length,
      infoCount: getInfoAlerts().length,
      hasMagneticData: hasMagneticStormAlert(),
      lastUpdate: lastHealthUpdate
    };
  };

  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    healthAlerts,
    healthLoading,
    healthError,
    lastHealthUpdate,
    
    // –ú–µ—Ç–æ–¥—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    getCriticalAlerts,
    getWarningAlerts, 
    getInfoAlerts,
    hasHealthAlerts,
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getHealthSummary,
    hasMagneticStormAlert,
    getHealthStats,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è UI
    isHealthy: !hasHealthAlerts() && !healthLoading,
    hasProblems: hasHealthAlerts(),
    needsAttention: getCriticalAlerts().length > 0 || getWarningAlerts().length > 0
  };
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç
export const HealthStatusIcons = {
  good: '‚úÖ',
  warning: '‚ö†Ô∏è', 
  critical: 'üö®',
  info: 'üí°',
  loading: '‚è≥',
  error: '‚ùå'
};

export const HealthStatusColors = {
  good: '#10b981',
  warning: '#f59e0b',
  critical: '#dc2626', 
  info: '#6366f1',
  loading: '#64748b',
  error: '#ef4444'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function getUserHealthDescription(userProfile) {
  if (!userProfile?.health?.length) {
    return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  }

  if (userProfile.health.includes('healthy') && userProfile.health.length === 1) {
    return '–û—Ç–ª–∏—á–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ';
  }

  const conditions = [];
  
  if (userProfile.health.includes('meteosensitive')) {
    conditions.push('–º–µ—Ç–µ–æ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å');
  }
  
  if (userProfile.health.includes('pressure')) {
    const bpType = userProfile.bloodPressure?.type;
    if (bpType === 'high') conditions.push('–≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è');
    else if (bpType === 'low') conditions.push('–≥–∏–ø–æ—Ç–æ–Ω–∏—è'); 
    else conditions.push('–ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–≤–ª–µ–Ω–∏–µ–º');
  }
  
  if (userProfile.health.includes('asthma')) {
    conditions.push('–∞—Å—Ç–º–∞');
  }
  
  if (userProfile.health.includes('allergies')) {
    conditions.push('–∞–ª–ª–µ—Ä–≥–∏–∏');
  }

  return conditions.length > 0 ? conditions.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
}

export default useHealthIntegration;