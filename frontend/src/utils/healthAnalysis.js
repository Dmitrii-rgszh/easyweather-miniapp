// üè• healthAnalysis.js - –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∏–º–ø–æ—Ä—Ç–æ–º

// –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
const HEALTH_THRESHOLDS = {
  pressure: {
    very_low: 735,
    low: 745,
    normal_low: 750,
    normal_high: 765,
    high: 770,
    very_high: 780
  },
  humidity: {
    low: 30,
    comfortable: 60,
    high: 75,
    very_high: 85
  },
  temperature: {
    very_cold: 0,
    cold: 10,
    cool: 18,
    warm: 25,
    hot: 30,
    very_hot: 35
  },
  wind: {
    calm: 3,
    light: 8,
    moderate: 15,
    strong: 25
  },
  kp_index: {
    quiet: 3,
    unsettled: 4,
    active: 5,
    storm: 7
  }
};

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—è—Ö (–±–µ–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API –ø–æ–∫–∞)
async function getSpaceWeatherData() {
  try {
    // –ó–∞–≥–ª—É—à–∫–∞ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–∫–∞ API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
    const mockData = {
      kp_index: {
        current_kp: Math.random() * 3 + 1, // 1-4
        activity_level: 'quiet',
        trend: 'stable'
      }
    };
    
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π API
    // const { getCompleteSpaceWeather } = await import('../spaceWeather');
    // return await getCompleteSpaceWeather();
    
    return mockData;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –ø–æ–≥–æ–¥—ã:', error);
    return null;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function getActivityLevelRu(level) {
  const levels = {
    'quiet': '–°–ø–æ–∫–æ–π–Ω–∞—è',
    'unsettled': '–ù–µ—É—Å—Ç–æ–π—á–∏–≤–∞—è', 
    'active': '–ê–∫—Ç–∏–≤–Ω–∞—è',
    'minor_storm': '–°–ª–∞–±–∞—è –±—É—Ä—è',
    'moderate_storm': '–£–º–µ—Ä–µ–Ω–Ω–∞—è –±—É—Ä—è',
    'strong_storm': '–°–∏–ª—å–Ω–∞—è –±—É—Ä—è',
    'severe_storm': '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –±—É—Ä—è',
    'unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
  };
  return levels[level] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

// –ú–∞–ø–ø–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∫–æ–¥—ã
function mapHealthConditions(userProfile) {
  const conditions = [];
  
  if (!userProfile?.health) return conditions;
  
  userProfile.health.forEach(condition => {
    switch (condition) {
      case 'meteosensitive':
        conditions.push('meteoropathy', 'migraine');
        break;
      case 'pressure':
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º —Å –¥–∞–≤–ª–µ–Ω–∏–µ–º
        const bpType = userProfile.bloodPressure?.type;
        if (bpType === 'high') conditions.push('hypertension');
        if (bpType === 'low') conditions.push('hypotension');
        if (bpType === 'variable') conditions.push('hypertension', 'hypotension');
        conditions.push('heart_disease');
        break;
      case 'asthma':
        conditions.push('asthma', 'respiratory');
        break;
      case 'allergies':
        conditions.push('allergies');
        break;
      case 'arthritis':
        conditions.push('arthritis', 'joints');
        break;
      case 'healthy':
        // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        break;
    }
  });
  
  return [...new Set(conditions)]; // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è
export async function analyzeWeatherForHealth(weather, userProfile, forecastData = []) {
  const alerts = [];
  const conditions = mapHealthConditions(userProfile);
  
  if (conditions.length === 0) return alerts;
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
  const pressure = weather.details?.pressure || 760;
  const humidity = weather.details?.humidity || 50;
  const temp = weather.temp || 20;
  const windSpeed = parseFloat(weather.details?.wind?.replace(' –º/—Å', '') || '0');
  
  console.log('ü©∫ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–¥–æ—Ä–æ–≤—å–µ:', { pressure, humidity, temp, windSpeed, conditions });

  // === –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ê–õ–ï–†–¢–´ (–∫—Ä–∞—Å–Ω—ã–µ) ===
  
  // –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ
  if (pressure >= HEALTH_THRESHOLDS.pressure.very_high && 
      (conditions.includes('hypertension') || conditions.includes('heart_disease'))) {
    alerts.push({
      id: 'critical_high_pressure',
      type: 'critical',
      icon: 'üö®',
      title: '–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
      message: `${pressure} –º–º —Ä—Ç.—Å—Ç. - –æ–ø–∞—Å–Ω–æ –≤—ã—Å–æ–∫–æ–µ!`,
      color: '#dc2626',
      bgColor: '#dc262615',
      priority: 1,
      conditions: ['hypertension', 'heart_disease'],
      advice: [
        'üö® –°–†–û–ß–ù–û –∏–∑–º–µ—Ä—å—Ç–µ –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
        'üíä –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–º–∏—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞',
        'üö∂‚Äç‚ôÇÔ∏è –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        'üìû –ü—Ä–∏ —É—Ö—É–¥—à–µ–Ω–∏–∏ - –≤—ã–∑–æ–≤–∏—Ç–µ –≤—Ä–∞—á–∞'
      ]
    });
  }
  
  // –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ
  if (pressure <= HEALTH_THRESHOLDS.pressure.very_low && 
      conditions.includes('hypotension')) {
    alerts.push({
      id: 'critical_low_pressure',
      type: 'critical',
      icon: '‚ö†Ô∏è',
      title: '–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
      message: `${pressure} –º–º —Ä—Ç.—Å—Ç. - —Ä–∏—Å–∫ –æ–±–º–æ—Ä–æ–∫–∞!`,
      color: '#dc2626',
      bgColor: '#dc262615',
      priority: 1,
      conditions: ['hypotension'],
      advice: [
        '‚òï –°–†–û–ß–ù–û –≤—ã–ø–µ–π—Ç–µ –∫–æ—Ñ–µ –∏–ª–∏ —Å–ª–∞–¥–∫–∏–π —á–∞–π',
        'üç´ –°—ä–µ—à—å—Ç–µ —á—Ç–æ-—Ç–æ —Å–ª–∞–¥–∫–æ–µ',
        'üö´ –ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–µ–∑–∫–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π',
        'üìû –ü—Ä–∏ –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–∏ - –≤—ã–∑–æ–≤–∏—Ç–µ –ø–æ–º–æ—â—å'
      ]
    });
  }

  // === –ü–†–ï–î–£–ü–†–ï–ñ–î–ê–Æ–©–ò–ï –ê–õ–ï–†–¢–´ (–æ—Ä–∞–Ω–∂–µ–≤—ã–µ) ===
  
  // –ê–Ω–∞–ª–∏–∑ –¥–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≥–∏–ø–µ—Ä—Ç–æ–Ω–∏–∫–æ–≤
  if (pressure >= HEALTH_THRESHOLDS.pressure.high && 
      conditions.includes('hypertension')) {
    alerts.push({
      id: 'high_pressure_warning',
      type: 'warning',
      icon: 'üìà',
      title: '–ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
      message: `${pressure} –º–º —Ä—Ç.—Å—Ç. - —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ–º`,
      color: '#f59e0b',
      bgColor: '#f59e0b15',
      priority: 2,
      conditions: ['hypertension'],
      advice: [
        'ü©∫ –ò–∑–º–µ—Ä—å—Ç–µ –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ —É—Ç—Ä–æ–º',
        'üßÇ –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ —Å–æ–ª—å –≤ —Ä–∞—Ü–∏–æ–Ω–µ',
        'üö∂‚Äç‚ôÄÔ∏è –õ–µ–≥–∫–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –≤–º–µ—Å—Ç–æ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
        'üíß –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã'
      ]
    });
  }
  
  // –ê–Ω–∞–ª–∏–∑ –¥–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≥–∏–ø–æ—Ç–æ–Ω–∏–∫–æ–≤
  if (pressure <= HEALTH_THRESHOLDS.pressure.low && 
      conditions.includes('hypotension')) {
    alerts.push({
      id: 'low_pressure_warning',
      type: 'warning',
      icon: 'üìâ',
      title: '–ü–æ–Ω–∏–∂–µ–Ω–Ω–æ–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
      message: `${pressure} –º–º —Ä—Ç.—Å—Ç. - –≤–æ–∑–º–æ–∂–Ω–∞ —Å–ª–∞–±–æ—Å—Ç—å`,
      color: '#f59e0b',
      bgColor: '#f59e0b15',
      priority: 2,
      conditions: ['hypotension'],
      advice: [
        '‚òï –í—ã–ø–µ–π—Ç–µ –∫–æ—Ñ–µ –∏–ª–∏ –∑–µ–ª–µ–Ω—ã–π —á–∞–π',
        'üöø –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π –¥—É—à –ø–æ–º–æ–∂–µ—Ç –≤–∑–±–æ–¥—Ä–∏—Ç—å—Å—è',
        'üèÉ‚Äç‚ôÄÔ∏è –õ–µ–≥–∫–∞—è –∑–∞—Ä—è–¥–∫–∞ —É–ª—É—á—à–∏—Ç —Ç–æ–Ω—É—Å',
        'üò¥ –°–ø–∏—Ç–µ –Ω–∞ –≤—ã—Å–æ–∫–æ–π –ø–æ–¥—É—à–∫–µ'
      ]
    });
  }

  // –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –º–∏–≥—Ä–µ–Ω–∏
  if (conditions.includes('migraine') || conditions.includes('meteoropathy')) {
    const migraineTriggers = [];
    
    if (pressure <= HEALTH_THRESHOLDS.pressure.low || 
        pressure >= HEALTH_THRESHOLDS.pressure.high) {
      migraineTriggers.push('–ø–µ—Ä–µ–ø–∞–¥—ã –¥–∞–≤–ª–µ–Ω–∏—è');
    }
    
    if (humidity >= HEALTH_THRESHOLDS.humidity.very_high) {
      migraineTriggers.push('–≤—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å');
    }
    
    if (windSpeed >= HEALTH_THRESHOLDS.wind.strong) {
      migraineTriggers.push('—Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä');
    }
    
    if (temp >= HEALTH_THRESHOLDS.temperature.hot || 
        temp <= HEALTH_THRESHOLDS.temperature.very_cold) {
      migraineTriggers.push('—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞');
    }
    
    if (migraineTriggers.length >= 2) {
      alerts.push({
        id: 'migraine_high_risk',
        type: 'warning',
        icon: 'ü§ï',
        title: '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –º–∏–≥—Ä–µ–Ω–∏',
        message: `–ù–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: ${migraineTriggers.join(', ')}`,
        color: '#8b5cf6',
        bgColor: '#8b5cf615',
        priority: 2,
        conditions: ['migraine', 'meteoropathy'],
        advice: [
          'üíä –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–∏–µ –∑–∞—Ä–∞–Ω–µ–µ',
          'üòé –ù–æ—Å–∏—Ç–µ —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏',
          'üßò‚Äç‚ôÄÔ∏è –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—é',
          'üö´ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π'
        ]
      });
    } else if (migraineTriggers.length === 1) {
      alerts.push({
        id: 'migraine_moderate_risk',
        type: 'info',
        icon: 'üí°',
        title: '–í–æ–∑–º–æ–∂–µ–Ω –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç',
        message: `–í—ã—è–≤–ª–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä: ${migraineTriggers[0]}`,
        color: '#6366f1',
        bgColor: '#6366f115',
        priority: 3,
        conditions: ['migraine', 'meteoropathy'],
        advice: [
          'üíä –ò–º–µ–π—Ç–µ –ø—Ä–∏ —Å–µ–±–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞',
          'üíß –ü–µ–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã',
          'üò¥ –û–±–µ—Å–ø–µ—á—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–Ω'
        ]
      });
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –¥–ª—è –∞—Å—Ç–º–∞—Ç–∏–∫–æ–≤
  if (conditions.includes('asthma')) {
    const asthmaRisks = [];
    
    if (humidity >= HEALTH_THRESHOLDS.humidity.very_high) {
      asthmaRisks.push('–≤—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å');
    }
    
    if (temp <= HEALTH_THRESHOLDS.temperature.cold) {
      asthmaRisks.push('—Ö–æ–ª–æ–¥–Ω—ã–π –≤–æ–∑–¥—É—Ö');
    }
    
    if (windSpeed >= HEALTH_THRESHOLDS.wind.strong) {
      asthmaRisks.push('—Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä');
    }
    
    if (asthmaRisks.length > 0) {
      alerts.push({
        id: 'asthma_warning',
        type: 'warning',
        icon: 'ü´Å',
        title: '–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ –¥–ª—è –¥—ã—Ö–∞–Ω–∏—è',
        message: `–§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞: ${asthmaRisks.join(', ')}`,
        color: '#06b6d4',
        bgColor: '#06b6d415',
        priority: 2,
        conditions: ['asthma'],
        advice: [
          'üí® –ò–º–µ–π—Ç–µ –ø—Ä–∏ —Å–µ–±–µ –∏–Ω–≥–∞–ª—è—Ç–æ—Ä',
          'üè† –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –≤—Ä–µ–º—è –Ω–∞ —É–ª–∏—Ü–µ',
          'üò∑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞—â–∏—Ç–Ω—É—é –º–∞—Å–∫—É',
          'üå°Ô∏è –î—ã—à–∏—Ç–µ —á–µ—Ä–µ–∑ –Ω–æ—Å, –Ω–µ —á–µ—Ä–µ–∑ —Ä–æ—Ç'
        ]
      });
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–ø–∞–¥–æ–≤ –¥–∞–≤–ª–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
  if (forecastData && forecastData.length > 0 && 
      (conditions.includes('meteoropathy') || conditions.includes('migraine'))) {
    
    const pressureChanges = analyzePressureChanges(forecastData, pressure);
    
    if (pressureChanges.maxChange >= 15) {
      alerts.push({
        id: 'pressure_fluctuation',
        type: 'warning',
        icon: 'üìä',
        title: '–†–µ–∑–∫–∏–µ –ø–µ—Ä–µ–ø–∞–¥—ã –¥–∞–≤–ª–µ–Ω–∏—è',
        message: `–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ ${pressureChanges.maxChange} –º–º —Ä—Ç.—Å—Ç. –∑–∞ —Å—É—Ç–∫–∏`,
        color: '#6366f1',
        bgColor: '#6366f115',
        priority: 3,
        conditions: ['meteoropathy', 'migraine'],
        advice: [
          '‚è∞ –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è',
          'üíä –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞',
          'üò¥ –í—ã—Å—ã–ø–∞–π—Ç–µ—Å—å –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –ø–æ–≥–æ–¥—ã',
          'üßò‚Äç‚ôÄÔ∏è –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏'
        ]
      });
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—è—Ö
  if (conditions.includes('meteoropathy')) {
    try {
      const spaceWeather = await getSpaceWeatherData();
      const magneticAlerts = analyzeMagneticActivity(spaceWeather, conditions);
      alerts.push(...magneticAlerts);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—è—Ö:', error);
    }
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
  return alerts.sort((a, b) => a.priority - b.priority);
}

// –ê–Ω–∞–ª–∏–∑ –º–∞–≥–Ω–∏—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function analyzeMagneticActivity(spaceWeather, conditions) {
  if (!spaceWeather?.kp_index || !conditions.includes('meteoropathy')) {
    return [];
  }
  
  const alerts = [];
  const kp = spaceWeather.kp_index;
  
  // –°–∏–ª—å–Ω–∞—è –º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è
  if (kp.current_kp >= HEALTH_THRESHOLDS.kp_index.storm) {
    alerts.push({
      id: 'magnetic_storm_severe',
      type: 'warning',
      icon: 'üåå',
      title: '–°–∏–ª—å–Ω–∞—è –º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è',
      message: `–ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${getActivityLevelRu(kp.activity_level)} (Kp=${kp.current_kp})`,
      color: '#7c3aed',
      bgColor: '#7c3aed15',
      priority: 2,
      conditions: ['meteoropathy'],
      advice: [
        'üò¥ –£–≤–µ–ª–∏—á—å—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ –Ω–∞ 1-2 —á–∞—Å–∞',
        'üíß –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã (–¥–æ 2.5–ª –≤ –¥–µ–Ω—å)',
        'üßò‚Äç‚ôÄÔ∏è –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –º–µ–¥–∏—Ç–∞—Ü–∏—é –∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—é',
        'üì± –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–∞–¥–∂–µ—Ç–æ–≤',
        'üö´ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π'
      ]
    });
  }
  // –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  else if (kp.current_kp >= HEALTH_THRESHOLDS.kp_index.active) {
    alerts.push({
      id: 'magnetic_activity_moderate',
      type: 'info',
      icon: 'üå†',
      title: '–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      message: `${getActivityLevelRu(kp.activity_level)} (Kp=${kp.current_kp})`,
      color: '#6366f1',
      bgColor: '#6366f115',
      priority: 3,
      conditions: ['meteoropathy'],
      advice: [
        'üò¥ –û–±–µ—Å–ø–µ—á—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–Ω',
        'üö∂‚Äç‚ôÄÔ∏è –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ',
        'ü•ó –õ–µ–≥–∫–æ–µ –ø–∏—Ç–∞–Ω–∏–µ, –∏–∑–±–µ–≥–∞–π—Ç–µ —Ç—è–∂–µ–ª–æ–π –ø–∏—â–∏',
        'üí° –ü—Ä–∏ –≥–æ–ª–æ–≤–Ω–æ–π –±–æ–ª–∏ - –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ –≤ —Ç–∏—à–∏–Ω–µ'
      ]
    });
  }
  
  return alerts;
}

// –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–∞–≤–ª–µ–Ω–∏—è
function analyzePressureChanges(forecastData, currentPressure) {
  if (!forecastData || forecastData.length === 0) {
    return { maxChange: 0, trend: 'stable' };
  }
  
  const pressureValues = [currentPressure];
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–≤–ª–µ–Ω–∏–µ –∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞
  forecastData.forEach(item => {
    if (item.details?.pressure) {
      pressureValues.push(item.details.pressure);
    }
  });
  
  if (pressureValues.length < 2) {
    return { maxChange: 0, trend: 'stable' };
  }
  
  const minPressure = Math.min(...pressureValues);
  const maxPressure = Math.max(...pressureValues);
  const maxChange = Math.round(maxPressure - minPressure);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ç—Ä–µ–Ω–¥
  const first = pressureValues[0];
  const last = pressureValues[pressureValues.length - 1];
  const trend = last > first + 5 ? 'rising' : 
                last < first - 5 ? 'falling' : 'stable';
  
  return { maxChange, trend, minPressure, maxPressure };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
export function getTimeBasedHealthAdvice(conditions, currentHour) {
  const advice = [];
  
  // –£—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –º–µ—Ç–µ–æ–∑–∞–≤–∏—Å–∏–º—ã—Ö
  if (conditions.includes('meteoropathy') && currentHour >= 6 && currentHour <= 10) {
    advice.push({
      time: 'morning',
      icon: 'üåÖ',
      text: '–£—Ç—Ä–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ –≤—Å—Ç–∞–≤–∞–π—Ç–µ —Å –∫—Ä–æ–≤–∞—Ç–∏, –∏–∑–º–µ—Ä—å—Ç–µ –¥–∞–≤–ª–µ–Ω–∏–µ'
    });
  }
  
  // –í–µ—á–µ—Ä–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (conditions.includes('hypertension') && currentHour >= 18 && currentHour <= 22) {
    advice.push({
      time: 'evening',
      icon: 'üåÜ',
      text: '–í–µ—á–µ—Ä–æ–º –∏–∑–±–µ–≥–∞–π—Ç–µ —Å–æ–ª–µ–Ω–æ–π –ø–∏—â–∏ –∏ –∫–æ—Ñ–µ–∏–Ω–∞'
    });
  }
  
  return advice;
}

// –≠–∫—Å–ø–æ—Ä—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
export async function getMagneticStormData() {
  const spaceWeather = await getSpaceWeatherData();
  return spaceWeather?.kp_index || null;
}

export function analyzeMagneticStorms(stormData, userProfile) {
  if (!stormData || !userProfile?.health?.includes('meteosensitive')) {
    return [];
  }
  
  return analyzeMagneticActivity({ kp_index: stormData }, ['meteoropathy']);
}