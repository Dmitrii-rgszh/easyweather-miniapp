// üè• healthAnalysis.js - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–¥–æ—Ä–æ–≤—å—è

// –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
const HEALTH_THRESHOLDS = {
  pressure: {
    very_low: 735,
    low: 745,
    normal_low: 750,
    normal_high: 765,
    high: 770,
    very_high: 780
  },
  humidity: {
    low: 30,
    comfortable: 60,
    high: 75,
    very_high: 85
  },
  temperature: {
    very_cold: 0,
    cold: 10,
    cool: 18,
    warm: 25,
    hot: 30,
    very_hot: 35
  },
  wind: {
    calm: 3,
    light: 8,
    moderate: 15,
    strong: 25
  },
  kp_index: {
    quiet: 3,
    unsettled: 4,
    active: 5,
    storm: 7
  }
};

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—å
async function getSpaceWeatherData() {
  try {
    console.log('üåå –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –ø–æ–≥–æ–¥—ã...');
    
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
    const { getCompleteSpaceWeather } = await import('../spaceWeather.js');
    const spaceWeatherData = await getCompleteSpaceWeather();
    
    if (spaceWeatherData && spaceWeatherData.kp_index) {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –ø–æ–≥–æ–¥—ã –ø–æ–ª—É—á–µ–Ω—ã:', spaceWeatherData.kp_index);
      return spaceWeatherData;
    }
    
    // Fallback –Ω–∞ –∑–∞–≥–ª—É—à–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
    return {
      kp_index: {
        current_kp: 2.5, // –°–ø–æ–∫–æ–π–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        activity_level: 'quiet',
        trend: 'stable'
      }
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –ø–æ–≥–æ–¥—ã:', error);
    
    // Fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return {
      kp_index: {
        current_kp: 2.0,
        activity_level: 'quiet', 
        trend: 'stable'
      }
    };
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function getActivityLevelRu(level) {
  const levels = {
    'quiet': '–°–ø–æ–∫–æ–π–Ω–∞—è',
    'unsettled': '–ù–µ—É—Å—Ç–æ–π—á–∏–≤–∞—è', 
    'active': '–ê–∫—Ç–∏–≤–Ω–∞—è',
    'minor_storm': '–°–ª–∞–±–∞—è –±—É—Ä—è',
    'moderate_storm': '–£–º–µ—Ä–µ–Ω–Ω–∞—è –±—É—Ä—è',
    'strong_storm': '–°–∏–ª—å–Ω–∞—è –±—É—Ä—è',
    'severe_storm': '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –±—É—Ä—è',
    'unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
  };
  return levels[level] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–∞–ø–ø–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–¥–æ—Ä–æ–≤—å—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç undefined
function mapHealthConditions(userProfile) {
  const conditions = [];
  
  // –ó–ê–©–ò–¢–ê –û–¢ UNDEFINED - –≥–ª–∞–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!
  if (!userProfile || !userProfile.health || !Array.isArray(userProfile.health)) {
    console.log('‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ health –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã:', userProfile);
    return conditions;
  }
  
  userProfile.health.forEach(condition => {
    switch (condition) {
      case 'meteosensitive':
        conditions.push('meteoropathy', 'migraine');
        break;
      case 'pressure':
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º —Å –¥–∞–≤–ª–µ–Ω–∏–µ–º
        const bpType = userProfile.bloodPressure?.type;
        if (bpType === 'high') conditions.push('hypertension');
        if (bpType === 'low') conditions.push('hypotension');
        if (bpType === 'variable') conditions.push('hypertension', 'hypotension');
        conditions.push('heart_disease');
        break;
      case 'asthma':
        conditions.push('asthma', 'respiratory');
        break;
      case 'allergies':
        conditions.push('allergies', 'respiratory');
        break;
      case 'arthritis':
        conditions.push('arthritis', 'joints');
        break;
    }
  });
  
  return conditions;
}

// –£–õ–£–ß–®–ï–ù–û: –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–∞–≤–ª–µ–Ω–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö
function analyzePressureChanges(forecastData, currentPressure) {
  if (!forecastData || !Array.isArray(forecastData) || forecastData.length < 2) {
    return { maxChange: 0, trend: 'stable', periods: [] };
  }
  
  const changes = [];
  let maxChange = 0;
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
  for (let i = 1; i < Math.min(forecastData.length, 8); i++) { // 8 —Ç–æ—á–µ–∫ = 24 —á–∞—Å–∞ (–∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞)
    const prev = forecastData[i - 1];
    const curr = forecastData[i];
    
    if (prev?.main?.pressure && curr?.main?.pressure) {
      const change = Math.abs(curr.main.pressure - prev.main.pressure);
      changes.push(change);
      maxChange = Math.max(maxChange, change);
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è –∫ –ø–µ—Ä–≤–æ–º—É –ø—Ä–æ–≥–Ω–æ–∑—É
  if (currentPressure && forecastData[0]?.main?.pressure) {
    const change = Math.abs(forecastData[0].main.pressure - currentPressure);
    maxChange = Math.max(maxChange, change);
  }
  
  const avgChange = changes.length > 0 ? changes.reduce((a, b) => a + b, 0) / changes.length : 0;
  
  let trend = 'stable';
  if (avgChange > 8) trend = 'volatile';
  else if (avgChange > 4) trend = 'changing';
  
  return {
    maxChange: Math.round(maxChange),
    avgChange: Math.round(avgChange),
    trend,
    periods: changes.length
  };
}

// –£–õ–£–ß–®–ï–ù–û: –ê–Ω–∞–ª–∏–∑ –º–∞–≥–Ω–∏—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
function analyzeMagneticActivity(spaceWeather, conditions) {
  if (!spaceWeather?.kp_index || !conditions.includes('meteoropathy')) {
    return [];
  }
  
  const alerts = [];
  const kp = spaceWeather.kp_index;
  const currentKp = kp.current_kp || 0;
  
  console.log(`üåå –ê–Ω–∞–ª–∏–∑ –º–∞–≥–Ω–∏—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: Kp=${currentKp}, —É—Ä–æ–≤–µ–Ω—å=${kp.activity_level}`);
  
  // –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –±—É—Ä—è (Kp >= 7)
  if (currentKp >= HEALTH_THRESHOLDS.kp_index.storm) {
    alerts.push({
      id: 'magnetic_storm_severe',
      type: 'critical',
      icon: 'üåå',
      title: '–°–∏–ª—å–Ω–∞—è –º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è',
      message: `–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (Kp=${currentKp.toFixed(1)})`,
      color: '#dc2626',
      bgColor: '#dc262615',
      priority: 1,
      conditions: ['meteoropathy'],
      advice: [
        'üö® –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á—å—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏',
        'üò¥ –£–≤–µ–ª–∏—á—å—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ –Ω–∞ 2-3 —á–∞—Å–∞',
        'üíß –ü–µ–π—Ç–µ –º–Ω–æ–≥–æ –≤–æ–¥—ã (–¥–æ 3–ª –≤ –¥–µ–Ω—å)',
        'üíä –î–µ—Ä–∂–∏—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –ø–æ–¥ —Ä—É–∫–æ–π',
        'üßò‚Äç‚ôÄÔ∏è –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –≥–ª—É–±–æ–∫–æ–µ –¥—ã—Ö–∞–Ω–∏–µ –∏ –º–µ–¥–∏—Ç–∞—Ü–∏—é',
        'üì± –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏'
      ]
    });
  }
  // –£–º–µ—Ä–µ–Ω–Ω–∞—è –±—É—Ä—è (Kp 5-6)
  else if (currentKp >= HEALTH_THRESHOLDS.kp_index.active) {
    alerts.push({
      id: 'magnetic_storm_moderate',
      type: 'warning',
      icon: 'üå†',
      title: '–ú–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è',
      message: `–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (Kp=${currentKp.toFixed(1)})`,
      color: '#7c3aed',
      bgColor: '#7c3aed15',
      priority: 2,
      conditions: ['meteoropathy'],
      advice: [
        'üò¥ –£–≤–µ–ª–∏—á—å—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ –Ω–∞ 1-2 —á–∞—Å–∞',
        'üíß –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã (–¥–æ 2.5–ª –≤ –¥–µ–Ω—å)',
        'üßò‚Äç‚ôÄÔ∏è –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—é',
        'üö´ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π',
        'üåø –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ'
      ]
    });
  }
  // –°–ª–∞–±–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (Kp 4-5)
  else if (currentKp >= HEALTH_THRESHOLDS.kp_index.unsettled) {
    alerts.push({
      id: 'magnetic_activity_mild',
      type: 'info',
      icon: 'üåô',
      title: '–£–º–µ—Ä–µ–Ω–Ω–∞—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      message: `–ù–µ–±–æ–ª—å—à–∏–µ –≤–æ–∑–º—É—â–µ–Ω–∏—è (Kp=${currentKp.toFixed(1)})`,
      color: '#6366f1',
      bgColor: '#6366f115',
      priority: 3,
      conditions: ['meteoropathy'],
      advice: [
        'üíß –°–ª–µ–¥–∏—Ç–µ –∑–∞ –≤–æ–¥–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º',
        'üò¥ –û–±–µ—Å–ø–µ—á—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–Ω',
        'üßò‚Äç‚ôÄÔ∏è –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è'
      ]
    });
  }
  
  return alerts;
}

// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê –ó–î–û–†–û–í–¨–Ø
export async function analyzeHealthRisks(weather, userProfile, forecastData = null) {
  console.log('üè• –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è...');
  
  // –î–û–ë–ê–í–õ–ï–ù–ê –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê
  if (!weather) {
    console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ');
    return [];
  }
  
  if (!userProfile) {
    console.log('‚ö†Ô∏è –ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return [];
  }
  
  if (!userProfile.health || !Array.isArray(userProfile.health) || userProfile.health.length === 0) {
    console.log('‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º –∏–ª–∏ health –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º');
    return [];
  }
  
  const alerts = [];
  const conditions = mapHealthConditions(userProfile);
  
  if (conditions.length === 0) {
    console.log('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª –ø—Ä–æ–±–ª–µ–º —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º');
    return [];
  }
  
  console.log('üìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', conditions);
  
  const { 
    temp, 
    pressure, 
    humidity, 
    wind_speed: windSpeed = 0,
    weather: weatherDesc = []
  } = weather;

  // –ê–Ω–∞–ª–∏–∑ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è
  if (pressure && (conditions.includes('hypertension') || conditions.includes('hypotension') || conditions.includes('meteoropathy'))) {
    if (pressure <= HEALTH_THRESHOLDS.pressure.very_low) {
      alerts.push({
        id: 'pressure_very_low',
        type: 'critical',
        icon: 'üìâ',
        title: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
        message: `${Math.round(pressure)} –º–º —Ä—Ç.—Å—Ç. - –æ–ø–∞—Å–Ω–æ –¥–ª—è –≥–∏–ø–æ—Ç–æ–Ω–∏–∫–æ–≤`,
        color: '#dc2626',
        bgColor: '#dc262615',
        priority: 1,
        conditions: ['hypotension', 'meteoropathy'],
        advice: [
          '‚òï –í—ã–ø–µ–π—Ç–µ –∫—Ä–µ–ø–∫–∏–π –∫–æ—Ñ–µ –∏–ª–∏ —á–∞–π',
          'üßÇ –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥—Å–æ–ª–µ–Ω–Ω–æ–π –≤–æ–¥—ã –ø–æ–º–æ–∂–µ—Ç',
          'üö´ –ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–µ–∑–∫–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π',
          'üíä –ò–º–µ–π—Ç–µ –ø–æ–¥ —Ä—É–∫–æ–π —Ç–æ–Ω–∏–∑–∏—Ä—É—é—â–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã',
          'üõèÔ∏è –ü—Ä–∏ –ø–ª–æ—Ö–æ–º —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏ - –ø–æ—Å—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º'
        ]
      });
    } else if (pressure <= HEALTH_THRESHOLDS.pressure.low) {
      alerts.push({
        id: 'pressure_low',
        type: 'warning',
        icon: 'üìâ',
        title: '–ù–∏–∑–∫–æ–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
        message: `${Math.round(pressure)} –º–º —Ä—Ç.—Å—Ç. - –≤–æ–∑–º–æ–∂–Ω–∞ —Å–ª–∞–±–æ—Å—Ç—å`,
        color: '#f59e0b',
        bgColor: '#f59e0b15',
        priority: 2,
        conditions: ['hypotension', 'meteoropathy'],
        advice: [
          '‚òï –£—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—Ñ–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
          'üíß –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –∂–∏–¥–∫–æ—Å—Ç–∏',
          'üö∂‚Äç‚ôÄÔ∏è –õ–µ–≥–∫–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ–∂–µ—Ç',
          'üò¥ –í—ã—Å—ã–ø–∞–π—Ç–µ—Å—å (8+ —á–∞—Å–æ–≤ —Å–Ω–∞)'
        ]
      });
    } else if (pressure >= HEALTH_THRESHOLDS.pressure.very_high) {
      alerts.push({
        id: 'pressure_very_high',
        type: 'critical',
        icon: 'üìà',
        title: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
        message: `${Math.round(pressure)} –º–º —Ä—Ç.—Å—Ç. - –æ–ø–∞—Å–Ω–æ –¥–ª—è –≥–∏–ø–µ—Ä—Ç–æ–Ω–∏–∫–æ–≤`,
        color: '#dc2626',
        bgColor: '#dc262615',
        priority: 1,
        conditions: ['hypertension', 'heart_disease'],
        advice: [
          'üíä –ü—Ä–∏–º–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã',
          'üßò‚Äç‚ôÄÔ∏è –ì–ª—É–±–æ–∫–æ–µ –¥—ã—Ö–∞–Ω–∏–µ –∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è',
          'üö´ –ò—Å–∫–ª—é—á–∏—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏',
          'üíß –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–ª–∏',
          'üìû –ü—Ä–∏ –ø–ª–æ—Ö–æ–º —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏ - –≤—ã–∑–æ–≤ –≤—Ä–∞—á–∞'
        ]
      });
    } else if (pressure >= HEALTH_THRESHOLDS.pressure.high) {
      alerts.push({
        id: 'pressure_high',
        type: 'warning',
        icon: 'üìà',
        title: '–í—ã—Å–æ–∫–æ–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
        message: `${Math.round(pressure)} –º–º —Ä—Ç.—Å—Ç. - –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –ê–î`,
        color: '#f59e0b',
        bgColor: '#f59e0b15',
        priority: 2,
        conditions: ['hypertension', 'heart_disease'],
        advice: [
          'üíä –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –ø—Ä–∏–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤',
          'üßò‚Äç‚ôÄÔ∏è –ò–∑–±–µ–≥–∞–π—Ç–µ —Å—Ç—Ä–µ—Å—Å–æ–≤',
          'üö∂‚Äç‚ôÄÔ∏è –¢–æ–ª—å–∫–æ –ª–µ–≥–∫–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏',
          'üíß –ü–µ–π—Ç–µ —Ç—Ä–∞–≤—è–Ω—ã–µ —á–∞–∏'
        ]
      });
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –¥–ª—è –º–µ—Ç–µ–æ–∑–∞–≤–∏—Å–∏–º—ã—Ö –∏ —Å–∫–ª–æ–Ω–Ω—ã—Ö –∫ –º–∏–≥—Ä–µ–Ω–∏
  if (conditions.includes('migraine') || conditions.includes('meteoropathy')) {
    const migraineTriggers = [];
    
    if (humidity >= HEALTH_THRESHOLDS.humidity.very_high) {
      migraineTriggers.push('–≤—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å');
    }
    
    if (windSpeed >= HEALTH_THRESHOLDS.wind.strong) {
      migraineTriggers.push('—Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä');
    }
    
    if (temp >= HEALTH_THRESHOLDS.temperature.very_hot) {
      migraineTriggers.push('—Å–∏–ª—å–Ω–∞—è –∂–∞—Ä–∞');
    }
    
    if (weatherDesc.length > 0 && weatherDesc[0].main && weatherDesc[0].main.includes('Rain')) {
      migraineTriggers.push('–¥–æ–∂–¥—å');
    }
    
    if (migraineTriggers.length >= 2) {
      alerts.push({
        id: 'migraine_high_risk',
        type: 'warning',
        icon: 'ü§ï',
        title: '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –º–∏–≥—Ä–µ–Ω–∏',
        message: `–ù–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: ${migraineTriggers.join(', ')}`,
        color: '#8b5cf6',
        bgColor: '#8b5cf615',
        priority: 2,
        conditions: ['migraine', 'meteoropathy'],
        advice: [
          'üíä –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–∏–µ –∑–∞—Ä–∞–Ω–µ–µ',
          'üòé –ù–æ—Å–∏—Ç–µ —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏',
          'üßò‚Äç‚ôÄÔ∏è –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—é',
          'üö´ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π',
          'üåô –ü—Ä–∏–≥–ª—É—à–∏—Ç–µ —è—Ä–∫–∏–π —Å–≤–µ—Ç –¥–æ–º–∞'
        ]
      });
    } else if (migraineTriggers.length === 1) {
      alerts.push({
        id: 'migraine_moderate_risk',
        type: 'info',
        icon: 'üí°',
        title: '–í–æ–∑–º–æ–∂–µ–Ω –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç',
        message: `–í—ã—è–≤–ª–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä: ${migraineTriggers[0]}`,
        color: '#6366f1',
        bgColor: '#6366f115',
        priority: 3,
        conditions: ['migraine', 'meteoropathy'],
        advice: [
          'üíä –ò–º–µ–π—Ç–µ –ø—Ä–∏ —Å–µ–±–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞',
          'üíß –ü–µ–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã',
          'üò¥ –û–±–µ—Å–ø–µ—á—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–Ω'
        ]
      });
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –¥–ª—è –∞—Å—Ç–º–∞—Ç–∏–∫–æ–≤
  if (conditions.includes('asthma')) {
    const asthmaRisks = [];
    
    if (humidity >= HEALTH_THRESHOLDS.humidity.very_high) {
      asthmaRisks.push('–≤—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å');
    }
    
    if (temp <= HEALTH_THRESHOLDS.temperature.cold) {
      asthmaRisks.push('—Ö–æ–ª–æ–¥–Ω—ã–π –≤–æ–∑–¥—É—Ö');
    }
    
    if (windSpeed >= HEALTH_THRESHOLDS.wind.strong) {
      asthmaRisks.push('—Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä');
    }
    
    if (asthmaRisks.length > 0) {
      alerts.push({
        id: 'asthma_warning',
        type: 'warning',
        icon: 'ü´Å',
        title: '–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ –¥–ª—è –¥—ã—Ö–∞–Ω–∏—è',
        message: `–§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞: ${asthmaRisks.join(', ')}`,
        color: '#06b6d4',
        bgColor: '#06b6d415',
        priority: 2,
        conditions: ['asthma'],
        advice: [
          'üí® –ò–º–µ–π—Ç–µ –ø—Ä–∏ —Å–µ–±–µ –∏–Ω–≥–∞–ª—è—Ç–æ—Ä',
          'üè† –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –≤—Ä–µ–º—è –Ω–∞ —É–ª–∏—Ü–µ',
          'üò∑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞—â–∏—Ç–Ω—É—é –º–∞—Å–∫—É',
          'üå°Ô∏è –î—ã—à–∏—Ç–µ —á–µ—Ä–µ–∑ –Ω–æ—Å, –Ω–µ —á–µ—Ä–µ–∑ —Ä–æ—Ç'
        ]
      });
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–ø–∞–¥–æ–≤ –¥–∞–≤–ª–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
  if (forecastData && Array.isArray(forecastData) && forecastData.length > 0 && 
      (conditions.includes('meteoropathy') || conditions.includes('migraine'))) {
    
    const pressureChanges = analyzePressureChanges(forecastData, pressure);
    
    if (pressureChanges.maxChange >= 15) {
      alerts.push({
        id: 'pressure_fluctuation_severe',
        type: 'warning',
        icon: 'üìä',
        title: '–†–µ–∑–∫–∏–µ –ø–µ—Ä–µ–ø–∞–¥—ã –¥–∞–≤–ª–µ–Ω–∏—è',
        message: `–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ ${pressureChanges.maxChange} –º–º —Ä—Ç.—Å—Ç. –∑–∞ —Å—É—Ç–∫–∏`,
        color: '#dc2626',
        bgColor: '#dc262615',
        priority: 1,
        conditions: ['meteoropathy', 'migraine'],
        advice: [
          'üíä –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞',
          'üò¥ –í—ã—Å—ã–ø–∞–π—Ç–µ—Å—å –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –ø–æ–≥–æ–¥—ã',
          'üßò‚Äç‚ôÄÔ∏è –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏',
          'üö´ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å—Ç—Ä–µ—Å—Å–æ–≤ –∏ –ø–µ—Ä–µ—É—Ç–æ–º–ª–µ–Ω–∏—è'
        ]
      });
    } else if (pressureChanges.maxChange >= 8) {
      alerts.push({
        id: 'pressure_fluctuation_moderate',
        type: 'info',
        icon: 'üìà',
        title: '–£–º–µ—Ä–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–≤–ª–µ–Ω–∏—è',
        message: `–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ ${pressureChanges.maxChange} –º–º —Ä—Ç.—Å—Ç. –∑–∞ —Å—É—Ç–∫–∏`,
        color: '#6366f1',
        bgColor: '#6366f115',
        priority: 3,
        conditions: ['meteoropathy', 'migraine'],
        advice: [
          '‚è∞ –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è',
          'üíß –ü–µ–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã',
          'üò¥ –û–±–µ—Å–ø–µ—á—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–Ω'
        ]
      });
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –æ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—è—Ö
  if (conditions.includes('meteoropathy')) {
    try {
      console.log('üåå –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—è—Ö...');
      const spaceWeather = await getSpaceWeatherData();
      const magneticAlerts = analyzeMagneticActivity(spaceWeather, conditions);
      alerts.push(...magneticAlerts);
      console.log(`üåå –î–æ–±–∞–≤–ª–µ–Ω–æ ${magneticAlerts.length} –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—è—Ö:', error);
    }
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  const uniqueAlerts = alerts.filter((alert, index, self) => 
    index === self.findIndex(a => a.id === alert.id)
  );
  
  const sortedAlerts = uniqueAlerts.sort((a, b) => a.priority - b.priority);
  
  console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ ${sortedAlerts.length} —Ä–∏—Å–∫–æ–≤ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è`);
  
  return sortedAlerts;
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export { 
  mapHealthConditions, 
  analyzePressureChanges, 
  analyzeMagneticActivity,
  HEALTH_THRESHOLDS 
};