// –ó–∞–º–µ–Ω–∏—Ç–µ –≤–µ—Å—å —Ñ–∞–π–ª frontend/src/ClothingRecommendations.js –Ω–∞ —ç—Ç–æ—Ç –∫–æ–¥:

import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ–¥–µ–∂–¥—ã
function getClothingRecommendations(temp, desc, humidity, windSpeed, isNight) {
  const recommendations = [];
  
  // –ë–∞–∑–æ–≤–∞—è –æ–¥–µ–∂–¥–∞ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
  if (temp < -10) {
    recommendations.push({
      icon: "üß•",
      text: "–¢–µ–ø–ª–∞—è –∑–∏–º–Ω—è—è –∫—É—Ä—Ç–∫–∞",
      color: "#1e40af",
      priority: 1
    });
    recommendations.push({
      icon: "üß§",
      text: "–ü–µ—Ä—á–∞—Ç–∫–∏ –∏ —à–∞–ø–∫–∞",
      color: "#7c3aed",
      priority: 1
    });
    recommendations.push({
      icon: "üë¢",
      text: "–¢–µ–ø–ª–∞—è –æ–±—É–≤—å",
      color: "#059669",
      priority: 1
    });
  } else if (temp < 0) {
    recommendations.push({
      icon: "üß•",
      text: "–ó–∏–º–Ω—è—è –∫—É—Ä—Ç–∫–∞",
      color: "#1e40af",
      priority: 1
    });
    recommendations.push({
      icon: "üß£",
      text: "–®–∞—Ä—Ñ –∏ —à–∞–ø–∫–∞",
      color: "#7c3aed",
      priority: 2
    });
  } else if (temp < 10) {
    recommendations.push({
      icon: "üß•",
      text: "–¢–µ–ø–ª–∞—è –∫—É—Ä—Ç–∫–∞",
      color: "#2563eb",
      priority: 1
    });
    recommendations.push({
      icon: "üëñ",
      text: "–î–ª–∏–Ω–Ω—ã–µ –±—Ä—é–∫–∏",
      color: "#059669",
      priority: 2
    });
  } else if (temp < 20) {
    recommendations.push({
      icon: "üß•",
      text: "–õ–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞",
      color: "#0891b2",
      priority: 2
    });
    recommendations.push({
      icon: "üëï",
      text: "–°–≤–∏—Ç–µ—Ä –∏–ª–∏ –∫–æ—Ñ—Ç–∞",
      color: "#7c3aed",
      priority: 2
    });
  } else if (temp < 25) {
    recommendations.push({
      icon: "üëï",
      text: "–õ–µ–≥–∫–∞—è –æ–¥–µ–∂–¥–∞",
      color: "#059669",
      priority: 2
    });
    recommendations.push({
      icon: "üëü",
      text: "–£–¥–æ–±–Ω–∞—è –æ–±—É–≤—å",
      color: "#0891b2",
      priority: 3
    });
  } else {
    recommendations.push({
      icon: "üëï",
      text: "–õ–µ–≥–∫–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞",
      color: "#059669",
      priority: 2
    });
    recommendations.push({
      icon: "ü©≥",
      text: "–®–æ—Ä—Ç—ã",
      color: "#0891b2",
      priority: 2
    });
    recommendations.push({
      icon: "üï∂Ô∏è",
      text: "–°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏",
      color: "#f59e0b",
      priority: 3
    });
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–≥–æ–¥–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º
  if (desc.toLowerCase().includes('–¥–æ–∂–¥') || desc.toLowerCase().includes('rain')) {
    recommendations.push({
      icon: "üåÇ",
      text: "–ó–æ–Ω—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!",
      color: "#dc2626",
      priority: 1
    });
    recommendations.push({
      icon: "ü•æ",
      text: "–í–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–∞—è –æ–±—É–≤—å",
      color: "#7c3aed",
      priority: 2
    });
  }

  if (desc.toLowerCase().includes('—Å–Ω–µ–≥') || desc.toLowerCase().includes('snow')) {
    recommendations.push({
      icon: "‚ùÑÔ∏è",
      text: "–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–Ω–µ–≥–∞",
      color: "#0891b2",
      priority: 1
    });
  }

  if (windSpeed > 10) {
    recommendations.push({
      icon: "üå¨Ô∏è",
      text: "–í–µ—Ç—Ä–æ–∑–∞—â–∏—Ç–Ω–∞—è –æ–¥–µ–∂–¥–∞",
      color: "#6366f1",
      priority: 2
    });
  }

  if (humidity > 80) {
    recommendations.push({
      icon: "üíß",
      text: "–î—ã—à–∞—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
      color: "#0891b2",
      priority: 3
    });
  }

  if (isNight) {
    recommendations.push({
      icon: "üåô",
      text: "–°–≤–µ—Ç–æ–æ—Ç—Ä–∞–∂–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã",
      color: "#7c3aed",
      priority: 3
    });
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –±–µ—Ä–µ–º —Ç–æ–ø-4
  return recommendations
    .sort((a, b) => a.priority - b.priority)
    .slice(0, 4);
}

// SVG —Å—Ç—Ä–µ–ª–∫–∞
const ChevronIcon = ({ isOpen }) => (
  <motion.svg
    width="22"
    height="22"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    animate={{ rotate: isOpen ? 180 : 0 }}
    transition={{ duration: 0.3 }}
    style={{ color: "#6b7280" }}
  >
    <path
      d="M6 9L12 15L18 9"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
  </motion.svg>
);

export default function ClothingRecommendations({ temp, desc, humidity, windSpeed, isNight }) {
  const [isExpanded, setIsExpanded] = useState(false);
  const recommendations = getClothingRecommendations(temp, desc, humidity || 50, windSpeed || 0, isNight);

  if (recommendations.length === 0) return null;

  // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2 –∏–∫–æ–Ω–∫–∏ –¥–ª—è –ø—Ä–µ–≤—å—é
  const previewIcons = recommendations.slice(0, 2).map(item => item.icon);

  return (
    <motion.div
      style={{
        background: "rgba(255, 255, 255, 0.9)",
        borderRadius: 16,
        padding: "10px",
        margin: "16px auto 0",
        maxWidth: 340,
        width: "100%",        // üëà –î–û–ë–ê–í–ò–¢–¨
        boxSizing: "border-box", // üëà –î–û–ë–ê–í–ò–¢–¨
        backdropFilter: "blur(10px)",
        boxShadow: "0 4px 20px rgba(0,0,0,0.1)",
        cursor: "pointer"
      }}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.6, delay: 0.3 }}
      onClick={() => setIsExpanded(!isExpanded)}
      whileHover={{ scale: 1.02 }}
      whileTap={{ scale: 0.98 }}
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—Ä–µ–≤—å—é */}
      <div style={{
        display: "flex",
        alignItems: "center",
        justifyContent: "space-between"
      }}>
        <div style={{
          display: "flex",
          alignItems: "center",
          gap: 8
        }}>
          <span style={{ fontSize: 16 }}>üëî</span>
          <div>
            <div style={{
              fontSize: 16,
              fontWeight: 600,
              color: "#374151",
              fontFamily: "Montserrat, Arial, sans-serif"
            }}>
              –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ–¥–µ–∂–¥—ã
            </div>
            {!isExpanded && (
              <div style={{
                display: "flex",
                gap: 4,
                marginTop: 2
              }}>
                {previewIcons.map((icon, index) => (
                  <span key={index} style={{ fontSize: 16 }}>
                    {icon}
                  </span>
                ))}
              </div>
            )}
          </div>
        </div>
        
        <ChevronIcon isOpen={isExpanded} />
      </div>

      {/* –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <AnimatePresence>
        {isExpanded && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: "auto" }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.3 }}
            style={{ overflow: "hidden" }}
          >
            <div style={{ marginTop: 16 }}>
              <div style={{
                display: "flex",
                justifyContent: "space-between",
                gap: 6,
                flexWrap: "wrap"
              }}>
                {recommendations.map((item, index) => (
                  <motion.div
                    key={index}
                    style={{
                      background: "rgba(255, 255, 255, 0.7)",
                      borderRadius: 12,
                      padding: "12px 8px",
                      textAlign: "center",
                      border: `2px solid ${item.color}20`,
                      position: "relative",
                      overflow: "hidden",
                      flex: "1 1 auto",
                      minWidth: "60px",
                      maxWidth: "70px"
                    }}
                    initial={{ opacity: 0, scale: 0.8 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.4, delay: index * 0.1 }}
                    whileHover={{ scale: 1.05 }}
                  >
                    {/* –¶–≤–µ—Ç–Ω–æ–π –∞–∫—Ü–µ–Ω—Ç */}
                    <div style={{
                      position: "absolute",
                      top: 0,
                      left: 0,
                      right: 0,
                      height: 3,
                      background: item.color,
                      borderRadius: "12px 12px 0 0"
                    }} />
                    
                    <div style={{
                      fontSize: 28,
                      lineHeight: 1
                    }}>
                      {item.icon}
                    </div>
                  </motion.div>
                ))}
              </div>

              {/* –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —Ç–µ–∫—Å—Ç */}
              <motion.div
                style={{
                  marginTop: 12,
                  fontSize: 14,
                  textAlign: "center",
                  color: "#6b7280",
                  fontStyle: "italic",
                  fontFamily: "Montserrat, Arial, sans-serif"
                }}
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.4 }}
              >
                {temp < 0 ? "ü•∂ –ë–µ—Ä–µ–≥–∏ —Å–µ–±—è –≤ –º–æ—Ä–æ–∑!" : 
                 temp > 25 ? "‚òÄÔ∏è –û—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞!" : 
                 "üå§Ô∏è –û–¥–µ–≤–∞–π—Å—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ!"}
              </motion.div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
}