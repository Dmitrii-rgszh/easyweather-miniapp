// HealthAlerts.js - –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

import React, { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤
function analyzeHealthRisks(weather, userProfile, forecastData = []) {
  if (!weather || !userProfile) return [];
  
  const alerts = [];
  const { pressure, humidity, temp } = weather.details;
  const health = userProfile.health || [];
  
  // ü©∫ –ì–ò–ü–ï–†–¢–û–ù–ò–ö–ò - –≤—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥)
  if (health.includes('pressure') && pressure >= 758) { // –ò–∑–º–µ–Ω–µ–Ω–æ —Å >760 –Ω–∞ >=758
    alerts.push({
      id: 'high_pressure_hypertension',
      type: 'warning',
      icon: 'ü©∫',
      title: '–ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
      message: `–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ ${pressure} –º–º —Ä—Ç.—Å—Ç. –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ`,
      color: '#f59e0b',
      bgColor: '#f59e0b15',
      priority: 1,
      advice: [
        '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–º –¥–∞–≤–ª–µ–Ω–∏–µ–º',
        '–ò–∑–±–µ–≥–∞–π—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫',
        '–ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã',
        '–ü—Ä–∏ –ø–ª–æ—Ö–æ–º —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏ - –∫ –≤—Ä–∞—á—É'
      ]
    });
  }
  
  // üíä –ì–ò–ü–û–¢–û–ù–ò–ö–ò - –Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥)
  if (health.includes('pressure') && pressure <= 742) { // –ò–∑–º–µ–Ω–µ–Ω–æ —Å <740 –Ω–∞ <=742
    alerts.push({
      id: 'low_pressure_hypotension',
      type: 'info',
      icon: 'üíä',
      title: '–ü–æ–Ω–∏–∂–µ–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
      message: `–ü–æ–Ω–∏–∂–µ–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ ${pressure} –º–º —Ä—Ç.—Å—Ç. –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Å–ª–∞–±–æ—Å—Ç—å`,
      color: '#8b5cf6',
      bgColor: '#8b5cf615',
      priority: 2,
      advice: [
        '–ë–æ–ª—å—à–µ –æ—Ç–¥—ã—Ö–∞ –∏ —Å–Ω–∞',
        '–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π –¥—É—à –ø–æ–º–æ–∂–µ—Ç',
        '–ö–æ—Ñ–µ –∏–ª–∏ –∫—Ä–µ–ø–∫–∏–π —á–∞–π',
        '–ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–µ–∑–∫–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π'
      ]
    });
  }
  
  // ü§ï –ú–ï–¢–ï–û–ó–ê–í–ò–°–ò–ú–´–ï - –ø–µ—Ä–µ–ø–∞–¥—ã –¥–∞–≤–ª–µ–Ω–∏—è
  if (health.includes('meteosensitive')) {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–∞–¥—ã –¥–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ
    const pressureChanges = analyzePressureChanges(forecastData);
    if (pressureChanges.maxChange > 10) {
      alerts.push({
        id: 'pressure_changes_migraine',
        type: 'warning',
        icon: 'ü§ï',
        title: '–ü–µ—Ä–µ–ø–∞–¥—ã –¥–∞–≤–ª–µ–Ω–∏—è',
        message: `–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–µ—Ä–µ–ø–∞–¥ –¥–æ ${pressureChanges.maxChange.toFixed(1)} –º–º —Ä—Ç.—Å—Ç.`,
        color: '#ef4444',
        bgColor: '#ef444415',
        priority: 1,
        advice: [
          '–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–∏–µ',
          '–ò–∑–±–µ–≥–∞–π—Ç–µ —Å—Ç—Ä–µ—Å—Å–æ–≤',
          '–ë–æ–ª—å—à–µ –æ—Ç–¥—ã—Ö–∞–π—Ç–µ',
          '–ü—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–π—Ç–µ –ø–æ–º–µ—â–µ–Ω–∏–µ'
        ]
      });
    }
  }
  
  // ü´Å –ê–°–¢–ú–ê–¢–ò–ö–ò - –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
  if (health.includes('asthma')) {
    const tempChanges = analyzeTempChanges(forecastData);
    if (humidity > 80 || tempChanges.maxChange > 8) {
      alerts.push({
        id: 'asthma_conditions',
        type: 'warning',
        icon: 'ü´Å',
        title: '–†–∏—Å–∫ –¥–ª—è –¥—ã—Ö–∞–Ω–∏—è',
        message: humidity > 80 
          ? `–í—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å ${humidity}% –º–æ–∂–µ—Ç –∑–∞—Ç—Ä—É–¥–Ω–∏—Ç—å –¥—ã—Ö–∞–Ω–∏–µ`
          : `–ü–µ—Ä–µ–ø–∞–¥—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–æ ${tempChanges.maxChange.toFixed(1)}¬∞C`,
        color: '#06b6d4',
        bgColor: '#06b6d415',
        priority: 2,
        advice: [
          '–ò–º–µ–π—Ç–µ –∏–Ω–≥–∞–ª—è—Ç–æ—Ä –ø—Ä–∏ —Å–µ–±–µ',
          '–ò–∑–±–µ–≥–∞–π—Ç–µ —Ñ–∏–∑–Ω–∞–≥—Ä—É–∑–æ–∫ –Ω–∞ —É–ª–∏—Ü–µ',
          '–û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏',
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–≤–ª–∞–∂–Ω–∏—Ç–µ–ª—å –≤–æ–∑–¥—É—Ö–∞'
        ]
      });
    }
  }
  
  // ü¶¥ –°–£–°–¢–ê–í–´ - –≤–ª–∞–∂–Ω–∞—è –∏ —Ö–æ–ª–æ–¥–Ω–∞—è –ø–æ–≥–æ–¥–∞
  if (health.includes('joints') || userProfile.age === '55+') {
    if (humidity > 75 && temp < 10) {
      alerts.push({
        id: 'joints_weather',
        type: 'info',
        icon: 'ü¶¥',
        title: '–°—É—Å—Ç–∞–≤—ã –≤ –∑–æ–Ω–µ —Ä–∏—Å–∫–∞',
        message: '–í–ª–∞–∂–Ω–∞—è –∏ –ø—Ä–æ—Ö–ª–∞–¥–Ω–∞—è –ø–æ–≥–æ–¥–∞ –º–æ–∂–µ—Ç —É—Å–∏–ª–∏—Ç—å –±–æ–ª–∏ –≤ —Å—É—Å—Ç–∞–≤–∞—Ö',
        color: '#7c3aed',
        bgColor: '#7c3aed15',
        priority: 3,
        advice: [
          '–°–æ–≥—Ä–µ–≤–∞—é—â–∏–µ –º–∞–∑–∏ –∏ –∫—Ä–µ–º—ã',
          '–¢–µ–ø–ª–∞—è –æ–¥–µ–∂–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞',
          '–õ–µ–≥–∫–∞—è —Ä–∞–∑–º–∏–Ω–∫–∞ –¥–æ–º–∞',
          '–ì–æ—Ä—è—á–∏–π —á–∞–π –∏–ª–∏ –≤–∞–Ω–Ω–∞'
        ]
      });
    }
  }
  
  return alerts.sort((a, b) => a.priority - b.priority);
}

// –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–ø–∞–¥–æ–≤ –¥–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ
function analyzePressureChanges(forecastData) {
  if (!forecastData || forecastData.length < 2) {
    return { maxChange: 0, direction: 'stable' };
  }
  
  const pressures = forecastData.slice(0, 8).map(item => 
    Math.round(item.main.pressure * 0.750062)
  );
  
  let maxChange = 0;
  let direction = 'stable';
  
  for (let i = 1; i < pressures.length; i++) {
    const change = Math.abs(pressures[i] - pressures[i-1]);
    if (change > maxChange) {
      maxChange = change;
      direction = pressures[i] > pressures[i-1] ? 'rising' : 'falling';
    }
  }
  
  return { maxChange, direction };
}

// –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–ø–∞–¥–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
function analyzeTempChanges(forecastData) {
  if (!forecastData || forecastData.length < 2) {
    return { maxChange: 0 };
  }
  
  const temps = forecastData.slice(0, 8).map(item => 
    Math.round(item.main.temp)
  );
  
  let maxChange = 0;
  
  for (let i = 1; i < temps.length; i++) {
    const change = Math.abs(temps[i] - temps[i-1]);
    if (change > maxChange) {
      maxChange = change;
    }
  }
  
  return { maxChange };
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π —Ç–µ–º—ã
function getHealthTheme(alerts) {
  const criticalAlerts = alerts.filter(alert => alert.type === 'warning').length;
  
  if (criticalAlerts > 0) {
    return {
      mainColor: '#f59e0b',
      bgColor: '#f59e0b15',
      iconBgColor: '#f59e0b10'
    };
  } else {
    return {
      mainColor: '#06b6d4',
      bgColor: '#06b6d415',
      iconBgColor: '#06b6d410'
    };
  }
}

// SVG –∏–∫–æ–Ω–∫–∞ —Å—Ç—Ä–µ–ª–∫–∏
const ChevronIcon = ({ isOpen }) => (
  <motion.svg
    width="20"
    height="20"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    animate={{ rotate: isOpen ? 180 : 0 }}
    transition={{ duration: 0.3 }}
    style={{ color: "#6b7280" }}
  >
    <path
      d="M6 9L12 15L18 9"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
  </motion.svg>
);

export default function HealthAlerts({ weather, userProfile, forecastData }) {
  const [isExpanded, setIsExpanded] = useState(false);
  
  const alerts = analyzeHealthRisks(weather, userProfile, forecastData);
  const theme = getHealthTheme(alerts);
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫
  if (!userProfile || alerts.length === 0) {
    return null;
  }

  // –ì–ª–∞–≤–Ω—ã–π –∞–ª–µ—Ä—Ç –¥–ª—è –ø—Ä–µ–≤—å—é
  const mainAlert = alerts[0];
  const warningCount = alerts.filter(alert => alert.type === 'warning').length;

  return (
    <motion.div
      style={{
        background: "rgba(255, 255, 255, 0.9)",
        borderRadius: 16,
        padding: "10px", // –£–º–µ–Ω—å—à–∏–ª–∏ —Å 16px –¥–æ 10px –∫–∞–∫ —É –¥—Ä—É–≥–∏—Ö –±–ª–æ–∫–æ–≤
        margin: "16px auto 0",
        maxWidth: 340,
        width: "100%",
        boxSizing: "border-box",
        backdropFilter: "blur(10px)",
        boxShadow: "0 4px 20px rgba(0,0,0,0.1)",
        cursor: "pointer",
        border: warningCount > 0 ? `2px solid ${theme.mainColor}40` : "1px solid rgba(255,255,255,0.2)"
      }}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.6, delay: 0.15 }}
      onClick={() => setIsExpanded(!isExpanded)}
      whileHover={{ scale: 1.02 }}
      whileTap={{ scale: 0.98 }}
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—Ä–µ–≤—å—é */}
      <div style={{
        display: "flex",
        alignItems: "center",
        justifyContent: "space-between"
      }}>
        {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å */}
        <div style={{
          display: "flex",
          alignItems: "center",
          gap: 12,
          flex: 1
        }}>
          {/* –ò–∫–æ–Ω–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π */}
          <motion.div
            style={{
              width: 48,
              height: 48,
              borderRadius: 12,
              background: `linear-gradient(135deg, ${theme.iconBgColor}, ${theme.bgColor})`,
              border: `1px solid ${theme.mainColor}30`,
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              flexShrink: 0,
              fontSize: 18 // –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏ —Å 20 –¥–æ 18
            }}
            animate={warningCount > 0 ? {
              scale: [1, 1.1, 1],
              boxShadow: [
                `0 0 0 0 ${theme.mainColor}40`,
                `0 0 0 8px ${theme.mainColor}20`,
                `0 0 0 0 ${theme.mainColor}40`
              ]
            } : {}}
            transition={{ duration: 2, repeat: Infinity }}
          >
            {mainAlert.icon}
          </motion.div>
          
          {/* –¢–µ–∫—Å—Ç */}
          <div style={{ flex: 1 }}>
            <div style={{
              fontSize: 16,
              fontWeight: 600,
              color: "#374151",
              fontFamily: "Montserrat, Arial, sans-serif",
              marginBottom: 2
            }}>
              ü©∫ –ó–¥–æ—Ä–æ–≤—å–µ {warningCount > 0 && <span style={{ color: theme.mainColor }}>‚ö†Ô∏è</span>}
            </div>
            <div style={{
              fontSize: 13, // –£–º–µ–Ω—å—à–∏–ª–∏ —Å 14 –¥–æ 13
              color: "#6b7280",
              fontFamily: "Montserrat, Arial, sans-serif"
            }}>
              {alerts.length === 1 
                ? mainAlert.title
                : `${alerts.length} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è`}
            </div>
          </div>
        </div>
        
        {/* –°—Ç—Ä–µ–ª–∫–∞ */}
        <ChevronIcon isOpen={isExpanded} />
      </div>

      {/* –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <AnimatePresence>
        {isExpanded && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: "auto" }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.3 }}
            style={{ overflow: "hidden" }}
          >
            <div style={{ paddingTop: 16 }}>
              {alerts.map((alert, index) => (
                <motion.div
                  key={alert.id}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.1 }}
                  style={{
                    background: alert.bgColor,
                    borderRadius: 12,
                    padding: "12px",
                    marginBottom: index < alerts.length - 1 ? 12 : 0,
                    border: `1px solid ${alert.color}20`
                  }}
                >
                  {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–ª–µ—Ä—Ç–∞ */}
                  <div style={{
                    display: "flex",
                    alignItems: "center",
                    gap: 8,
                    marginBottom: 8
                  }}>
                    <span style={{ fontSize: 20 }}>{alert.icon}</span>
                    <div>
                      <div style={{
                        fontSize: 15,
                        fontWeight: 600,
                        color: alert.color,
                        fontFamily: "Montserrat, Arial, sans-serif"
                      }}>
                        {alert.title}
                      </div>
                    </div>
                  </div>
                  
                  {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
                  <div style={{
                    fontSize: 14,
                    color: "#374151",
                    fontFamily: "Montserrat, Arial, sans-serif",
                    marginBottom: 10,
                    lineHeight: 1.4
                  }}>
                    {alert.message}
                  </div>
                  
                  {/* –°–æ–≤–µ—Ç—ã */}
                  <div style={{
                    background: "rgba(255,255,255,0.6)",
                    borderRadius: 8,
                    padding: "8px 10px"
                  }}>
                    <div style={{
                      fontSize: 12,
                      fontWeight: 600,
                      color: "#6b7280",
                      marginBottom: 6,
                      fontFamily: "Montserrat, Arial, sans-serif"
                    }}>
                      üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
                    </div>
                    {alert.advice.map((tip, tipIndex) => (
                      <div key={tipIndex} style={{
                        fontSize: 12,
                        color: "#374151",
                        fontFamily: "Montserrat, Arial, sans-serif",
                        marginBottom: tipIndex < alert.advice.length - 1 ? 2 : 0
                      }}>
                        ‚Ä¢ {tip}
                      </div>
                    ))}
                  </div>
                </motion.div>
              ))}
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
}