import React, { useState, useEffect } from "react";
import { ThemeProvider, createTheme } from "@mui/material/styles";
import CircularProgress from "@mui/material/CircularProgress";
import Button from "@mui/material/Button";
import { motion } from "framer-motion";
import AdBanner from "./AdBanner";
import WeatherCard from "./WeatherCard";
import CityDateInput from "./CityDateInput";
import ClothingRecommendations from "./ClothingRecommendations";
import QuickActions from "./QuickActions";
import { fetchWeather, fetchForecast, fetchUVIndex } from "./weatherApi";
import { getCityByCoords } from "./geoApi";
import AirQuality from "./AirQuality";
import UVIndex from "./UVIndex";

function CloudsEffect() {
  return (
    <>
      {[...Array(4)].map((_, i) => (
        <motion.div
          key={i}
          style={{
            position: "absolute",
            left: `${i * 24 + 7}%`,
            top: `${40 + i * 18}px`,
            width: 110 + i * 32,
            height: 42 + i * 19,
            background: "rgba(255,255,255,0.60)",
            borderRadius: "50%",
            filter: "blur(14px)",
            opacity: 0.58 - i * 0.1,
            zIndex: 99,
            pointerEvents: "none"
          }}
          animate={{
            x: [0, 28 + i * 11, 0]
          }}
          transition={{
            duration: 29 + i * 6,
            repeat: Infinity,
            repeatType: "mirror"
          }}
        />
      ))}
    </>
  );
}

function RainEffect() {
  return (
    <>
      {[...Array(18)].map((_, i) => {
        const isGlow = i % 3 === 0;
        return (
          <motion.div
            key={i}
            style={{
              position: "absolute",
              left: `${6 + Math.random() * 88}%`,
              top: `${-24 + Math.random() * 18}%`,
              width: 8 + Math.random() * 9,
              height: 28 + Math.random() * 20,
              background: isGlow
                ? "linear-gradient(180deg,#60a5fa88 0%,#38bdf8bb 100%)"
                : "rgba(92,160,240,0.20)",
              borderRadius: "40%",
              filter: isGlow ? "blur(3px)" : "blur(1.1px)",
              boxShadow: isGlow ? "0 0 16px 3px #38bdf8aa" : undefined,
              opacity: isGlow ? 0.5 : 0.32,
              zIndex: 99,
              pointerEvents: "none"
            }}
            animate={{
              y: ["0%", "128%"],
              opacity: [0.45, 0.63, 0]
            }}
            transition={{
              duration: 2.8 + Math.random() * 2.7,
              repeat: Infinity,
              delay: i * 0.23
            }}
          />
        );
      })}
    </>
  );
}

function SnowEffect() {
  return (
    <>
      {[...Array(20)].map((_, i) => {
        const isLight = i % 4 === 0;
        return (
          <motion.div
            key={i}
            style={{
              position: "absolute",
              left: `${2 + Math.random() * 95}%`,
              top: `${-14 + Math.random() * 14}%`,
              width: isLight ? 9 : 13 + Math.random() * 8,
              height: isLight ? 9 : 13 + Math.random() * 8,
              background: isLight
                ? "rgba(255,255,255,0.85)"
                : "rgba(255,255,255,0.65)",
              borderRadius: "50%",
              filter: isLight ? "blur(2px)" : "blur(3px)",
              opacity: isLight ? 0.7 : 0.5,
              zIndex: 99,
              pointerEvents: "none"
            }}
            animate={{
              y: ["0%", "110%"],
              x: [0, Math.random() * 40 - 20],
              opacity: [0.7, 0.9, 0]
            }}
            transition={{
              duration: 4 + Math.random() * 3,
              repeat: Infinity,
              delay: i * 0.3
            }}
          />
        );
      })}
    </>
  );
}

function SunEffect() {
  return (
    <>
      <motion.div
        style={{
          position: "absolute",
          right: "10%",
          top: "15%",
          width: 120,
          height: 120,
          borderRadius: "50%",
          background: "linear-gradient(135deg, #fbbf2488 0%, #f59e0b88 100%)",
          filter: "blur(30px)",
          opacity: 0.6,
          zIndex: 1,
          pointerEvents: "none"
        }}
        animate={{
          scale: [1, 1.09, 1.04, 1],
          opacity: [0.91, 0.99, 0.81, 0.91]
        }}
        transition={{
          duration: 5,
          repeat: Infinity,
          repeatType: "mirror"
        }}
      />
    </>
  );
}

function NightGlow() {
  return (
    <>
      <motion.div
        style={{
          position: "absolute",
          left: "9%",
          top: "-16%",
          width: "82%",
          height: 230,
          borderRadius: "50%",
          background: "linear-gradient(135deg, #29297a66 0%, #25284dbb 100%)",
          filter: "blur(40px)",
          opacity: 0.82,
          zIndex: 1,
          pointerEvents: "none"
        }}
        animate={{ scale: [1, 1.12, 0.93, 1] }}
        transition={{ duration: 17, repeat: Infinity, repeatType: "mirror" }}
      />
      <motion.div
        style={{
          position: "absolute",
          left: "62%",
          bottom: "-11%",
          width: 180,
          height: 120,
          borderRadius: "50%",
          background: "linear-gradient(135deg, #7d86c799 0%, #1a203bff 100%)",
          filter: "blur(44px)",
          opacity: 0.47,
          zIndex: 1,
          pointerEvents: "none"
        }}
        animate={{ scale: [1, 1.07, 0.98, 1] }}
        transition={{ duration: 23, repeat: Infinity, repeatType: "mirror" }}
      />
    </>
  );
}

// --- –¢–µ–º–∞ ---
const theme = createTheme({
  typography: { fontFamily: ['Montserrat'].join(',') },
});

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≥–æ—Ä–æ–¥–∞ ---
async function getCityPhoto(city) {
  const ACCESS_KEY = process.env.REACT_APP_UNSPLASH_KEY;
  const url = `https://api.unsplash.com/photos/random?query=${encodeURIComponent(city)}%20landmark&orientation=landscape&client_id=${ACCESS_KEY}`;
  try {
    const res = await fetch(url);
    const data = await res.json();
    return data?.urls?.regular || null;
  } catch {
    return null;
  }
}

// --- –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –ª–∏ –¥–∞—Ç–∞ ---
function isToday(date) {
  const today = new Date();
  return (
    date.getDate() === today.getDate() &&
    date.getMonth() === today.getMonth() &&
    date.getFullYear() === today.getFullYear()
  );
}

// --- –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω—É–∂–Ω—ã–π —á–∞—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è ---
function findNearestForecast(forecastList, targetDate, targetHour) {
  const target = new Date(targetDate);
  target.setHours(targetHour, 0, 0, 0);

  console.log('–ò—â–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è:', target.toISOString());

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –Ω—É–∂–Ω–æ–π –¥–∞—Ç—ã
  const dayForecasts = forecastList.filter(item => {
    const itemDate = new Date(item.dt * 1000);
    return itemDate.getDate() === target.getDate() &&
           itemDate.getMonth() === target.getMonth() &&
           itemDate.getFullYear() === target.getFullYear();
  });

  console.log('–ü—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è:', dayForecasts.length);

  if (dayForecasts.length === 0) {
    console.log('–ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã');
    return null;
  }

  // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –∫ –Ω—É–∂–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
  let minDiff = Infinity;
  let nearest = null;
  
  for (const item of dayForecasts) {
    const itemDate = new Date(item.dt * 1000);
    const diff = Math.abs(itemDate.getTime() - target.getTime());
    
    console.log(`–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ ${itemDate.toLocaleTimeString()}, —Ä–∞–∑–Ω–∏—Ü–∞: ${diff/1000/60} –º–∏–Ω—É—Ç`);
    
    if (diff < minDiff) {
      minDiff = diff;
      nearest = item;
    }
  }

  if (nearest) {
    console.log('–ù–∞–π–¥–µ–Ω –±–ª–∏–∂–∞–π—à–∏–π –ø—Ä–æ–≥–Ω–æ–∑:', new Date(nearest.dt * 1000).toLocaleString());
  }

  return nearest;
}

// --- –¶–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ ---
function getBackground(desc, isNight) {
  if (!desc) return "#c3d3f7";
  if (desc.toLowerCase().includes('—è—Å–Ω–æ')) return isNight 
    ? "#22253b" 
    : "linear-gradient(160deg, #7fcfff 0%, #e7e9fd 100%)";
  if (desc.toLowerCase().match(/–æ–±–ª–∞—á|–ø–∞—Å–º—É—Ä|cloud/)) return "linear-gradient(180deg, #bfc9dc 0%, #dbe5fa 100%)";
  if (desc.toLowerCase().includes('–¥–æ–∂–¥')) return "linear-gradient(180deg, #6c7ba1 0%, #b1bfd8 100%)";
  if (desc.toLowerCase().includes('—Å–Ω–µ–≥')) return "linear-gradient(180deg, #e0f2fc 0%, #f2fafc 100%)";
  return "#c3d3f7";
}

function App() {
  const [city, setCity] = useState("–ú–æ—Å–∫–≤–∞");
  const [date, setDate] = useState(new Date());
  const [weather, setWeather] = useState(null);
  const [forecast, setForecast] = useState([]);
  const [loading, setLoading] = useState(false);
  const [photoUrl, setPhotoUrl] = useState("");
  const [logoTop, setLogoTop] = useState(32);
  const [desc, setDesc] = useState("");
  const [isNight, setIsNight] = useState(false);
  const [favorites, setFavorites] = useState(() => {
    try {
      const saved = localStorage.getItem('weatherFavorites');
      return saved ? JSON.parse(saved) : [];
    } catch {
      return [];
    }
  });

  // --- –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–æ–≥–æ–¥–æ–π ---
  const handleShareWeather = (weather) => {
    const shareText = `üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ ${weather.city}: ${weather.temp}¬∞, ${weather.desc.toLowerCase()}`;
    
    if (navigator.share) {
      navigator.share({
        title: 'EasyWeather',
        text: shareText,
        url: window.location.href
      });
    } else {
      // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ Web Share API
      navigator.clipboard.writeText(shareText).then(() => {
        alert('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
      }).catch(() => {
        alert(`${shareText}\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é`);
      });
    }
  };

  // --- –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ---
  const handleSaveToFavorites = (cityName) => {
    const newFavorites = [...favorites];
    const index = newFavorites.indexOf(cityName);
    
    if (index > -1) {
      newFavorites.splice(index, 1);
      alert(`${cityName} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ`);
    } else {
      newFavorites.push(cityName);
      alert(`${cityName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!`);
    }
    
    setFavorites(newFavorites);
    try {
      localStorage.setItem('weatherFavorites', JSON.stringify(newFavorites));
    } catch (e) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', e);
    }
  };

  // --- –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–µ–π–±–ª "–ì–æ—Ä–æ–¥" ---
  const renderCityLabel = (
    <div style={{
      textAlign: "center",
      marginBottom: 8,
      color: "#fff",
      fontWeight: 500,
      fontSize: 20,
      letterSpacing: 0.3,
      textShadow: "0 2px 8px rgba(0,0,0,0.57), 0 0 1px #fff",
      fontFamily: "Montserrat, Arial, sans-serif"
    }}>
      –ì–æ—Ä–æ–¥
    </div>
  );

  // --- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –æ—Ç—Å—Ç—É–ø –ª–æ–≥–æ—Ç–∏–ø–∞ ---
  useEffect(() => {
    function handleResize() {
      setLogoTop(window.innerHeight < 500 ? 8 : 32);
    }
    handleResize();
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  // --- –§–æ—Ç–æ –≥–æ—Ä–æ–¥–∞ –Ω–∞ —Ñ–æ–Ω–µ ---
  useEffect(() => {
    if (weather && weather.city) {
      getCityPhoto(weather.city).then(setPhotoUrl);
    }
  }, [weather && weather.city]);

  // --- –õ–û–ì–ò–ö–ê –ó–ê–ü–†–û–°–ê –ü–û–ì–û–î–´ –ø–æ –≥–æ—Ä–æ–¥—É+–¥–∞—Ç–µ ---
  const handleShowWeather = async () => {
    setLoading(true);
    try {
      if (isToday(date)) {
        // –°–ï–ì–û–î–ù–Ø - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –∏ –±–ª–∏–∂–∞–π—à–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
        const data = await fetchWeather(city);
        const details = {
          feels: Math.round(data.main.feels_like),
          pressure: Math.round(data.main.pressure * 0.750062),
          humidity: data.main.humidity,
          wind: `${Math.round(data.wind.speed)} –º/—Å`,
          sunrise: "",
          sunset: ""
        };

        setWeather({
          city: data.name,
          temp: Math.round(data.main.temp),
          desc: data.weather[0].description[0].toUpperCase() + data.weather[0].description.slice(1),
          icon: `https://openweathermap.org/img/wn/${data.weather[0].icon}@4x.png`,
          details
        });

        setDesc(data.weather[0].description);
        setIsNight(data.weather[0].icon.includes("n"));

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—É—Å–µ–ª—å –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
        const { list: forecastList } = await fetchForecast(city);
        const now = Date.now();
        
        // –ò—â–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ —á–∞—Å—ã (—á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–µ 3-6 —á–∞—Å–æ–≤)
        const todayForecasts = forecastList
          .filter(item => {
            const itemDate = new Date(item.dt * 1000);
            const today = new Date();
            return itemDate.getDate() === today.getDate() && 
                   itemDate.getMonth() === today.getMonth() &&
                   itemDate.getFullYear() === today.getFullYear() &&
                   item.dt * 1000 > now; // —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
          })
          .slice(0, 4); // –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 4 –ø—Ä–æ–≥–Ω–æ–∑–∞

        const carusel = todayForecasts.map(slot => ({
          time: new Date(slot.dt * 1000).toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
          }),
          temp: Math.round(slot.main.temp),
          icon: `https://openweathermap.org/img/wn/${slot.weather[0].icon}@2x.png`
        }));
        
        setForecast(carusel);

      } else {
        // –ë–£–î–£–©–ê–Ø –î–ê–¢–ê - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        const { list: forecastList } = await fetchForecast(city);
        
        // –ò—â–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É (–±–ª–∏–∂–∞–π—à–∏–π –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏)
        const now = new Date();
        const targetHour = now.getHours();
        const mainForecast = findNearestForecast(forecastList, date, targetHour);
        
        setWeather(mainForecast ? {
          city: city,
          temp: Math.round(mainForecast.main.temp),
          desc: mainForecast.weather[0].description[0].toUpperCase() + mainForecast.weather[0].description.slice(1),
          icon: `https://openweathermap.org/img/wn/${mainForecast.weather[0].icon}@4x.png`,
          details: {
            feels: Math.round(mainForecast.main.feels_like),
            pressure: Math.round(mainForecast.main.pressure * 0.750062),
            humidity: mainForecast.main.humidity,
            wind: `${Math.round(mainForecast.wind.speed)} –º/—Å`
          }
        } : null);
        
        setDesc(mainForecast?.weather?.[0]?.description || "");
        setIsNight(mainForecast?.weather?.[0]?.icon?.includes("n") || false);

        // –ö–∞—Ä—É—Å–µ–ª—å –¥–ª—è –±—É–¥—É—â–µ–π –¥–∞—Ç—ã: —É—Ç—Ä–æ, –¥–µ–Ω—å, –≤–µ—á–µ—Ä
        const targetTimes = [9, 15, 21]; // 09:00, 15:00, 21:00
        const carusel = targetTimes
          .map(hour => findNearestForecast(forecastList, date, hour))
          .filter(Boolean)
          .map(slot => ({
            time: new Date(slot.dt * 1000).toLocaleTimeString('ru-RU', { 
              hour: '2-digit', 
              minute: '2-digit' 
            }),
            temp: Math.round(slot.main.temp),
            icon: `https://openweathermap.org/img/wn/${slot.weather[0].icon}@2x.png`
          }));
        
        setForecast(carusel);
      }
    } catch (e) {
      console.error('Weather error:', e);
      alert("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: " + e.message);
    }
    setLoading(false);
  };

  // --- –õ–û–ì–ò–ö–ê –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ ---
  const handleGeoWeather = () => {
    if (!navigator.geolocation) {
      alert("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º");
      return;
    }
    setLoading(true);
    navigator.geolocation.getCurrentPosition(
      async (position) => {
        const lat = position.coords.latitude;
        const lon = position.coords.longitude;
        try {
          const data = await fetchWeather({ lat, lon });
          const details = {
            feels: Math.round(data.main.feels_like),
            pressure: Math.round(data.main.pressure * 0.750062),
            humidity: data.main.humidity,
            wind: `${Math.round(data.wind.speed)} –º/—Å`,
            sunrise: "",
            sunset: ""
          };

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
          setCity(data.name);

          const { list: forecastList } = await fetchForecast({ lat, lon });
          
          if (isToday(date)) {
            // –°–ï–ì–û–î–ù–Ø - –ª–æ–≥–∏–∫–∞ –∫–∞–∫ –≤ handleShowWeather
            setWeather({
              city: data.name,
              temp: Math.round(data.main.temp),
              desc: data.weather[0].description[0].toUpperCase() + data.weather[0].description.slice(1),
              icon: `https://openweathermap.org/img/wn/${data.weather[0].icon}@4x.png`,
              details
            });

            setDesc(data.weather[0].description);
            setIsNight(data.weather[0].icon.includes("n"));

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—É—Å–µ–ª—å –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
            const now = Date.now();
            const todayForecasts = forecastList
              .filter(item => {
                const itemDate = new Date(item.dt * 1000);
                const today = new Date();
                return itemDate.getDate() === today.getDate() && 
                       itemDate.getMonth() === today.getMonth() &&
                       itemDate.getFullYear() === today.getFullYear() &&
                       item.dt * 1000 > now; // —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
              })
              .slice(0, 4); // –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 4 –ø—Ä–æ–≥–Ω–æ–∑–∞

            const carusel = todayForecasts.map(slot => ({
              time: new Date(slot.dt * 1000).toLocaleTimeString('ru-RU', { 
                hour: '2-digit', 
                minute: '2-digit' 
              }),
              temp: Math.round(slot.main.temp),
              icon: `https://openweathermap.org/img/wn/${slot.weather[0].icon}@2x.png`
            }));
            
            setForecast(carusel);

          } else {
            // –ë–£–î–£–©–ê–Ø –î–ê–¢–ê - –ª–æ–≥–∏–∫–∞ –∫–∞–∫ –≤ handleShowWeather
            const now = new Date();
            const targetHour = now.getHours();
            const mainForecast = findNearestForecast(forecastList, date, targetHour);
            
            setWeather(mainForecast ? {
              city: data.name,
              temp: Math.round(mainForecast.main.temp),
              desc: mainForecast.weather[0].description[0].toUpperCase() + mainForecast.weather[0].description.slice(1),
              icon: `https://openweathermap.org/img/wn/${mainForecast.weather[0].icon}@4x.png`,
              details: {
                feels: Math.round(mainForecast.main.feels_like),
                pressure: Math.round(mainForecast.main.pressure * 0.750062),
                humidity: mainForecast.main.humidity,
                wind: `${Math.round(mainForecast.wind.speed)} –º/—Å`
              }
            } : null);
            
            setDesc(mainForecast?.weather?.[0]?.description || "");
            setIsNight(mainForecast?.weather?.[0]?.icon?.includes("n") || false);

            // –ö–∞—Ä—É—Å–µ–ª—å –¥–ª—è –±—É–¥—É—â–µ–π –¥–∞—Ç—ã: —É—Ç—Ä–æ, –¥–µ–Ω—å, –≤–µ—á–µ—Ä
            const targetTimes = [9, 15, 21]; // 09:00, 15:00, 21:00
            const carusel = targetTimes
              .map(hour => findNearestForecast(forecastList, date, hour))
              .filter(Boolean)
              .map(slot => ({
                time: new Date(slot.dt * 1000).toLocaleTimeString('ru-RU', { 
                  hour: '2-digit', 
                  minute: '2-digit' 
                }),
                temp: Math.round(slot.main.temp),
                icon: `https://openweathermap.org/img/wn/${slot.weather[0].icon}@2x.png`
              }));
            
            setForecast(carusel);
          }
        } catch (error) {
          console.error('Geo weather error:', error);
          setWeather({ 
            city: "?", 
            temp: '--', 
            desc: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏', 
            icon: '', 
            details: {} 
          });
          setForecast([]);
          setPhotoUrl(null);
        } finally {
          setLoading(false);
        }
      },
      (error) => {
        console.error('Geolocation error:', error);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é: " + error.message);
        setLoading(false);
      }
    );
  };

  // --- –†–ï–ù–î–ï–† ---
  return (
    <ThemeProvider theme={theme}>
      <motion.div
        key={desc + (isNight ? 'night' : 'day')}
        style={{
          minHeight: '100vh',
          paddingTop: "max(36px, env(safe-area-inset-top))",
          paddingBottom: 120, // üÜï –£–≤–µ–ª–∏—á–∏–ª–∏ –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É
          position: "relative",
          overflow: "hidden",
          fontFamily: 'Montserrat, Arial, sans-serif'
        }}
        animate={{ background: getBackground(desc, isNight) }}
        transition={{ duration: 1.2 }}
      >
        {/* --- UNSPLASH BACKGROUND --- */}
        {photoUrl && (
          <div
            style={{
              position: "absolute",
              zIndex: -2,
              top: 0, left: 0, width: "100vw", height: "100vh",
              backgroundImage: `url(${photoUrl})`,
              backgroundSize: "cover",
              backgroundPosition: "center",
              opacity: 0.14,
              filter: "blur(2.2px)",
              pointerEvents: "none"
            }}
          />
        )}

        {/* --- –≠–§–§–ï–ö–¢–´ –§–û–ù–ê --- */}
        {desc && desc.toLowerCase().match(/–æ–±–ª–∞—á|–ø–∞—Å–º—É—Ä|cloud/) && <CloudsEffect />}
        {desc && desc.toLowerCase().includes('–¥–æ–∂–¥') && <RainEffect />}
        {desc && desc.toLowerCase().includes('—Å–Ω–µ–≥') && <SnowEffect />}
        {desc && desc.toLowerCase().includes('—è—Å–Ω–æ') && !isNight && <SunEffect />}
        {isNight && <NightGlow />}

        {/* --- –õ–û–ì–û --- */}
        <motion.img
          src="/logo.png"
          alt="EasyWeather"
          style={{
            display: "block",
            position: "relative",
            margin: `${logoTop}px auto 16px`,
            width: 130,
            maxWidth: "80vw",
            zIndex: 99,
            height: "auto"
          }}
          animate={{
            scale: [1, 1.08, 0.97, 1],
            rotate: [0, 4, -2, 0],
            y: [0, -7, 0, 3, 0]
          }}
          transition={{
            duration: 3.8,
            repeat: Infinity,
            ease: "easeInOut"
          }}
        />

        {/* --- –§–û–†–ú–ê –ì–û–†–û–î+–î–ê–¢–ê --- */}
        <motion.div
          initial="hidden"
          animate="visible"
          variants={{
            hidden: { opacity: 0, y: 20 },
            visible: {
              opacity: 1,
              y: 0,
              transition: { staggerChildren: 0.22 }
            }
          }}
          style={{ maxWidth: 340, margin: "0px auto 0", textAlign: 'center', zIndex: 99 }}
        >
          <motion.div variants={{ hidden: { opacity: 0, y: 20 }, visible: { opacity: 1, y: 0 } }}>
            {renderCityLabel}
            <CityDateInput
              city={city}
              setCity={setCity}
              date={date}
              setDate={setDate}
              disabled={loading}
            />
          </motion.div>

          {/* --- –ö–ù–û–ü–ö–ò --- */}
          <motion.div variants={{ hidden: { opacity: 0, y: 20 }, visible: { opacity: 1, y: 0 } }}>
            <Button
              variant="contained"
              color="primary"
              fullWidth
              onClick={handleShowWeather}
              disabled={loading}
              sx={{
                marginTop: 1,
                marginBottom: 0,
                borderRadius: 3,
                height: 46,
                fontSize: 20,
                fontWeight: 500,
                textTransform: "none",
                fontFamily: "Montserrat, Arial, sans-serif"
              }}
            >
              {loading ? <CircularProgress color="inherit" size={24} /> : '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É'}
            </Button>
          </motion.div>
          <motion.div variants={{ hidden: { opacity: 0, y: 20 }, visible: { opacity: 1, y: 0 } }}>
            <Button
              variant="text"
              color="secondary"
              fullWidth
              sx={{
                mt: 1,
                color: "#fff",
                borderRadius: 3,
                fontSize: 20,
                fontWeight: 500,
                textTransform: "none",
                height: 46,
                fontFamily: "Montserrat, Arial, sans-serif",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                textShadow: "0 2px 8px rgba(0,0,0,0.37), 0 0 1px #fff",
                gap: 1,
              }}
              onClick={handleGeoWeather}
              disabled={loading}
            >
              <span>–ü–æ–≥–æ–¥–∞ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏</span>
                <svg
                  style={{ marginLeft: 8, minWidth: 22 }}
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  fill="none"
                  viewBox="0 0 24 24"
                >
                  <circle cx="12" cy="12" r="3.5" stroke="white" strokeWidth="1.7"/>
                  <circle cx="12" cy="12" r="8" stroke="white" strokeWidth="1.7"/>
                  <circle cx="12" cy="12" r="1.7" fill="#2498dc"/>
                </svg>
            </Button>
          </motion.div>
        </motion.div>

        {/* --- –ò–ó–ë–†–ê–ù–ù–´–ï –ì–û–†–û–î–ê --- */}
        {favorites.length > 0 && !weather && (
          <motion.div
            style={{
              maxWidth: 340,
              margin: "20px auto 0",
              padding: "0 16px"
            }}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.5 }}
          >
            <div style={{
              color: "#fff",
              fontSize: 14,
              fontWeight: 500,
              marginBottom: 8,
              textAlign: "center",
              textShadow: "0 2px 8px rgba(0,0,0,0.5)",
              fontFamily: "Montserrat, Arial, sans-serif"
            }}>
              ‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
            </div>
            <div style={{
              display: "flex",
              flexWrap: "wrap",
              gap: 8,
              justifyContent: "center"
            }}>
              {favorites.map((favCity, index) => (
                <motion.button
                  key={favCity}
                  onClick={() => {
                    setCity(favCity);
                    setTimeout(handleShowWeather, 100);
                  }}
                  style={{
                    background: "rgba(255,255,255,0.2)",
                    border: "1px solid rgba(255,255,255,0.3)",
                    borderRadius: 16,
                    padding: "6px 12px",
                    color: "#fff",
                    fontSize: 12,
                    fontWeight: 500,
                    cursor: "pointer",
                    backdropFilter: "blur(10px)",
                    fontFamily: "Montserrat, Arial, sans-serif"
                  }}
                  whileHover={{ scale: 1.05, backgroundColor: "rgba(255,255,255,0.3)" }}
                  whileTap={{ scale: 0.95 }}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 + 0.6 }}
                >
                  {favCity}
                </motion.button>
              ))}
            </div>
          </motion.div>
        )}

        <div style={{ height: 24 }} />

        {/* --- –ö–ê–†–¢–û–ß–ö–ê –ü–û–ì–û–î–´ –ò –î–û–ü–û–õ–ù–ï–ù–ò–Ø --- */}
        {weather && (
          <div style={{ 
            marginTop: "-15px",
            paddingBottom: "16px" // üÜï –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞
          }}>
            <WeatherCard {...weather} isNight={isNight} forecast={forecast} photoUrl={photoUrl} />
            
            {/* üÜï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –û–î–ï–ñ–î–´ */}
            <ClothingRecommendations 
              temp={weather.temp}
              desc={weather.desc}
              humidity={weather.details?.humidity}
              windSpeed={parseFloat(weather.details?.wind?.replace(' –º/—Å', '') || '0')}
              isNight={isNight}
            />
            
            {/* üÜï –ë–´–°–¢–†–´–ï –î–ï–ô–°–¢–í–ò–Ø */}
            <QuickActions 
              weather={weather}
              onShareWeather={handleShareWeather}
              onSaveToFavorites={handleSaveToFavorites}
            />
          </div>
        )}

        <AdBanner />
      </motion.div>
    </ThemeProvider>
  );
}

export default App;















