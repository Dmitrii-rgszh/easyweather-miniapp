// –û—Å–Ω–æ–≤–Ω–æ–π API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—ç–∫–µ–Ω–¥–æ–º + –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';

// üÜï –°–ò–°–¢–ï–ú–ê –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
const backendCache = {
  weather: {},
  forecast: {},
  health: null
};

// –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞
const CACHE_DURATION = {
  weather: 5 * 60 * 1000,      // 5 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–≥–æ–¥—ã
  forecast: 30 * 60 * 1000,    // 30 –º–∏–Ω—É—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
  health: 60 * 1000            // 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è health check
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞
function createCacheKey(city) {
  return city.toLowerCase().trim();
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
function isCacheValid(cacheEntry, maxAge) {
  return cacheEntry && 
         cacheEntry.timestamp && 
         (Date.now() - cacheEntry.timestamp) < maxAge;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ –≤–∞—à –±—ç–∫–µ–Ω–¥ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
 */
export async function fetchWeatherFromBackend(city) {
  const cacheKey = createCacheKey(city);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  if (isCacheValid(backendCache.weather[cacheKey], CACHE_DURATION.weather)) {
    console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –±—ç–∫–µ–Ω–¥–∞ –¥–ª—è:', cacheKey);
    return backendCache.weather[cacheKey].data;
  }

  try {
    console.log('üåê –ó–∞–ø—Ä–æ—Å –∫ –±—ç–∫–µ–Ω–¥—É –¥–ª—è:', cacheKey);
    
    const response = await fetch(`${API_BASE_URL}/api/weather/current`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        city_name: city
      })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();
    
    if (!result.success) {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    backendCache.weather[cacheKey] = {
      data: result.data,
      timestamp: Date.now()
    };

    console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è: ${cacheKey} (–∏—Å—Ç–æ—á–Ω–∏–∫: ${result.source || 'backend'})`);
    return result.data;
    
  } catch (error) {
    console.error('Backend API error:', error);
    throw new Error(`–û—à–∏–±–∫–∞ API: ${error.message}`);
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ –≤–∞—à –±—ç–∫–µ–Ω–¥ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
 */
export async function fetchForecastFromBackend(city, days = 5) {
  const cacheKey = `${createCacheKey(city)}_${days}`;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  if (isCacheValid(backendCache.forecast[cacheKey], CACHE_DURATION.forecast)) {
    console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Å –±—ç–∫–µ–Ω–¥–∞ –¥–ª—è:', cacheKey);
    return backendCache.forecast[cacheKey].data;
  }

  try {
    console.log('üåê –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥–Ω–æ–∑–∞ –∫ –±—ç–∫–µ–Ω–¥—É –¥–ª—è:', cacheKey);
    
    const response = await fetch(`${API_BASE_URL}/api/weather/forecast`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        city_name: city,
        days: days
      })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();
    
    if (!result.success) {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞');
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    backendCache.forecast[cacheKey] = {
      data: result.data,
      timestamp: Date.now()
    };

    return result.data;
    
  } catch (error) {
    console.error('Backend forecast API error:', error);
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: ${error.message}`);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±—ç–∫–µ–Ω–¥–∞ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
 */
export async function checkBackendHealth() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  if (isCacheValid(backendCache.health, CACHE_DURATION.health)) {
    return backendCache.health.data;
  }

  try {
    const response = await fetch(`${API_BASE_URL}/health`);
    const isHealthy = response.ok;
    
    // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    backendCache.health = {
      data: isHealthy,
      timestamp: Date.now()
    };
    
    console.log('üè• –°—Ç–∞—Ç—É—Å –±—ç–∫–µ–Ω–¥–∞:', isHealthy ? '–ó–¥–æ—Ä–æ–≤' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    return isHealthy;
  } catch (error) {
    console.error('Backend health check failed:', error);
    
    // –ö—ç—à–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
    backendCache.health = {
      data: false,
      timestamp: Date.now()
    };
    
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
 */
export async function getWeatherStats() {
  try {
    const response = await fetch(`${API_BASE_URL}/api/weather/stats`);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Stats API error:', error);
    throw error;
  }
}

/**
 * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */
export async function loginAdmin(username, password) {
  try {
    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        username,
        password
      })
    });

    const result = await response.json();
    
    if (!response.ok) {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
    }

    return result;
  } catch (error) {
    console.error('Login error:', error);
    throw error;
  }
}

// üÜï –§–£–ù–ö–¶–ò–Ø –û–ß–ò–°–¢–ö–ò –£–°–¢–ê–†–ï–í–®–ï–ì–û –ö–≠–®–ê
export function clearOldBackendCache() {
  const now = Date.now();
  
  // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–≥–æ–¥—ã
  Object.keys(backendCache.weather).forEach(key => {
    if (!isCacheValid(backendCache.weather[key], CACHE_DURATION.weather)) {
      delete backendCache.weather[key];
    }
  });
  
  // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
  Object.keys(backendCache.forecast).forEach(key => {
    if (!isCacheValid(backendCache.forecast[key], CACHE_DURATION.forecast)) {
      delete backendCache.forecast[key];
    }
  });
  
  // –û—á–∏—â–∞–µ–º –∫—ç—à health check
  if (!isCacheValid(backendCache.health, CACHE_DURATION.health)) {
    backendCache.health = null;
  }
  
  console.log('üßπ –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à –±—ç–∫–µ–Ω–¥–∞ –æ—á–∏—â–µ–Ω');
}

// üÜï –§–£–ù–ö–¶–ò–Ø –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ô –û–ß–ò–°–¢–ö–ò –ö–≠–®–ê (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
export function clearAllBackendCache() {
  backendCache.weather = {};
  backendCache.forecast = {};
  backendCache.health = null;
  console.log('üßπ –í–µ—Å—å –∫—ç—à –±—ç–∫–µ–Ω–¥–∞ –æ—á–∏—â–µ–Ω');
}

// üÜï –§–£–ù–ö–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ö–≠–®–ï (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
export function getBackendCacheInfo() {
  const info = {
    weather: Object.keys(backendCache.weather).length,
    forecast: Object.keys(backendCache.forecast).length,
    health: backendCache.health ? 'cached' : 'not cached'
  };
  console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ –±—ç–∫–µ–Ω–¥–∞:', info);
  return info;
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
if (typeof window !== 'undefined') {
  setInterval(clearOldBackendCache, 5 * 60 * 1000);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ window –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ development —Ä–µ–∂–∏–º–µ
  if (process.env.NODE_ENV === 'development') {
    window.clearBackendCache = clearAllBackendCache;
    window.getBackendCacheInfo = getBackendCacheInfo;
    window.checkBackend = checkBackendHealth;
  }
}