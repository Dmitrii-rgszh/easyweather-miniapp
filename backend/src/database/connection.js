const { Pool } = require('pg');
const logger = require('../utils/logger');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbConfig = {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    host: process.env.DB_HOST || 'easyweather-postgres',
    port: process.env.DB_PORT || 5432,
    database: process.env.DB_NAME || 'easyweather',
    user: process.env.DB_USER || 'easyweather_user',
    password: process.env.DB_PASSWORD || process.env.POSTGRES_PASSWORD,
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    max: parseInt(process.env.DB_MAX_CONNECTIONS) || 20,
    min: parseInt(process.env.DB_MIN_CONNECTIONS) || 5,
    idleTimeoutMillis: parseInt(process.env.DB_IDLE_TIMEOUT) || 30000,
    connectionTimeoutMillis: parseInt(process.env.DB_CONNECTION_TIMEOUT) || 10000,
    acquireTimeoutMillis: parseInt(process.env.DB_ACQUIRE_TIMEOUT) || 60000,
    
    // SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
    ssl: process.env.NODE_ENV === 'production' ? {
        rejectUnauthorized: false
    } : false,
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    application_name: 'easyweather-backend',
    statement_timeout: 60000, // 60 —Å–µ–∫—É–Ω–¥
    query_timeout: 30000,     // 30 —Å–µ–∫—É–Ω–¥
};

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ DATABASE_URL
if (process.env.DATABASE_URL) {
    logger.info('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DATABASE_URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î');
} else {
    logger.info(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: ${dbConfig.user}@${dbConfig.host}:${dbConfig.port}/${dbConfig.database}`);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
const pool = new Pool(process.env.DATABASE_URL ? {
    connectionString: process.env.DATABASE_URL,
    ssl: dbConfig.ssl,
    max: dbConfig.max,
    min: dbConfig.min,
    idleTimeoutMillis: dbConfig.idleTimeoutMillis,
    connectionTimeoutMillis: dbConfig.connectionTimeoutMillis,
    application_name: dbConfig.application_name
} : dbConfig);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—É–ª–∞
pool.on('connect', (client) => {
    logger.debug(`–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (PID: ${client.processID})`);
});

pool.on('acquire', (client) => {
    logger.debug(`–ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ –ø—É–ª–∞ (PID: ${client.processID})`);
});

pool.on('remove', (client) => {
    logger.debug(`–ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –ø—É–ª–∞ (PID: ${client.processID})`);
});

pool.on('error', (err, client) => {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err);
});

// =================================
// –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
// =================================

/**
 * –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function testConnection() {
    try {
        const client = await pool.connect();
        const result = await client.query('SELECT NOW() as current_time, version() as version');
        
        logger.info('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
        logger.info(`üìÖ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ –ë–î: ${result.rows[0].current_time}`);
        logger.debug(`üîß –í–µ—Ä—Å–∏—è PostgreSQL: ${result.rows[0].version}`);
        
        client.release();
        return true;
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
        throw error;
    }
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞
 */
async function query(text, params = []) {
    const start = Date.now();
    
    try {
        const result = await pool.query(text, params);
        const duration = Date.now() - start;
        
        logger.debug(`–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${duration}–º—Å: ${text.substring(0, 50)}...`);
        
        return result;
    } catch (error) {
        const duration = Date.now() - start;
        logger.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (${duration}–º—Å): ${error.message}`);
        logger.error(`SQL: ${text}`);
        logger.error(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${JSON.stringify(params)}`);
        throw error;
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
async function getClient() {
    try {
        const client = await pool.connect();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        client.query = async (text, params) => {
            const start = Date.now();
            try {
                const result = await client.query(text, params);
                const duration = Date.now() - start;
                logger.debug(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${duration}–º—Å`);
                return result;
            } catch (error) {
                logger.error(`–û—à–∏–±–∫–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error.message}`);
                throw error;
            }
        };
        
        return client;
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
        throw error;
    }
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
async function transaction(callback) {
    const client = await getClient();
    
    try {
        await client.query('BEGIN');
        logger.debug('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞—á–∞—Ç–∞');
        
        const result = await callback(client);
        
        await client.query('COMMIT');
        logger.debug('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞');
        
        return result;
    } catch (error) {
        await client.query('ROLLBACK');
        logger.warn('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞:', error.message);
        throw error;
    } finally {
        client.release();
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 */
function getPoolStats() {
    return {
        total: pool.totalCount,
        idle: pool.idleCount,
        waiting: pool.waitingCount,
        max: pool.options.max,
        min: pool.options.min
    };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function healthCheck() {
    try {
        const result = await query(`
            SELECT 
                COUNT(*) as active_connections,
                (SELECT setting FROM pg_settings WHERE name = 'max_connections') as max_connections,
                pg_size_pretty(pg_database_size(current_database())) as db_size
        `);
        
        const stats = getPoolStats();
        
        return {
            status: 'healthy',
            database: {
                connected: true,
                active_connections: parseInt(result.rows[0].active_connections),
                max_connections: parseInt(result.rows[0].max_connections),
                database_size: result.rows[0].db_size
            },
            pool: stats
        };
    } catch (error) {
        return {
            status: 'unhealthy',
            error: error.message,
            database: {
                connected: false
            }
        };
    }
}

/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 */
async function close() {
    try {
        await pool.end();
        logger.info('–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î –∑–∞–∫—Ä—ã—Ç');
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:', error);
        throw error;
    }
}

// =================================
// –≠–ö–°–ü–û–†–¢
// =================================

module.exports = {
    pool,
    query,
    getClient,
    transaction,
    testConnection,
    healthCheck,
    getPoolStats,
    close
};