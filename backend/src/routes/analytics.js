// backend/routes/analytics.js - –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
const express = require('express');
const router = express.Router();

module.exports = (db) => {
  
  // üìä –ë–ê–ù–ù–ï–† –ê–ù–ê–õ–ò–¢–ò–ö–ê
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–Ω–Ω–µ—Ä–æ–≤
  router.get('/banner', async (req, res) => {
    try {
      const { limit = 100, banner_id, from_date, to_date } = req.query;
      
      let query = 'SELECT * FROM banner_analytics';
      let params = [];
      let whereConditions = [];
      
      if (banner_id) {
        whereConditions.push('banner_id = ?');
        params.push(banner_id);
      }
      
      if (from_date) {
        whereConditions.push('clicked_at >= ?');
        params.push(from_date);
      }
      
      if (to_date) {
        whereConditions.push('clicked_at <= ?');
        params.push(to_date);
      }
      
      if (whereConditions.length > 0) {
        query += ' WHERE ' + whereConditions.join(' AND ');
      }
      
      query += ' ORDER BY clicked_at DESC LIMIT ?';
      params.push(parseInt(limit));
      
      const stmt = db.prepare(query);
      const result = stmt.all(...params);
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∞–Ω–Ω–µ—Ä–∞–º
      const statsQuery = `
        SELECT 
          banner_id,
          COUNT(*) as total_clicks,
          COUNT(DISTINCT user_id) as unique_users,
          DATE(clicked_at) as click_date,
          COUNT(*) as daily_clicks
        FROM banner_analytics 
        WHERE clicked_at >= date('now', '-30 days')
        GROUP BY banner_id, DATE(clicked_at)
        ORDER BY clicked_at DESC
      `;
      
      const statsStmt = db.prepare(statsQuery);
      const stats = statsStmt.all();
      
      res.json({
        success: true,
        data: {
          clicks: result,
          stats: stats,
          total_records: result.length
        }
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –±–∞–Ω–Ω–µ—Ä–æ–≤:', error);
      res.status(500).json({
        success: false,
        error: error.message
      });
    }
  });
  
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–∫–∞ –ø–æ –±–∞–Ω–Ω–µ—Ä—É
  router.post('/banner-click', async (req, res) => {
    try {
      const { 
        banner_id = 'vtb_card', 
        user_id = 'anonymous',
        user_agent,
        referrer,
        page_url,
        click_coordinates 
      } = req.body;
      
      const ip_address = req.ip || req.connection.remoteAddress;
      
      const stmt = db.prepare(`
        INSERT INTO banner_analytics (
          banner_id, 
          user_id, 
          ip_address,
          user_agent,
          referrer,
          page_url,
          click_coordinates,
          clicked_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, datetime('now'))
      `);
      
      const result = stmt.run(
        banner_id, 
        user_id, 
        ip_address,
        user_agent || req.headers['user-agent'],
        referrer,
        page_url || req.headers.referer,
        JSON.stringify(click_coordinates)
      );
      
      console.log(`üéØ –ö–ª–∏–∫ –ø–æ –±–∞–Ω–Ω–µ—Ä—É ${banner_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id}`);
      
      res.json({ 
        success: true, 
        click_id: result.lastInsertRowid 
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–∫–∞:', error);
      res.status(500).json({
        success: false,
        error: error.message
      });
    }
  });
  
  // üì± MINIAPP –ê–ù–ê–õ–ò–¢–ò–ö–ê
  
  // –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ Mini App
  router.post('/miniapp/session-start', async (req, res) => {
    try {
      const { 
        telegram_id,
        platform,
        user_agent,
        screen_resolution,
        timezone 
      } = req.body;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
      const session_id = `ew_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      const ip_address = req.ip || req.connection.remoteAddress;
      
      const stmt = db.prepare(`
        INSERT INTO miniapp_sessions (
          session_id,
          telegram_id,
          platform,
          ip_address,
          user_agent,
          screen_resolution,
          timezone,
          started_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, datetime('now'))
      `);
      
      stmt.run(
        session_id,
        telegram_id || 999999999, // Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        platform,
        ip_address,
        user_agent || req.headers['user-agent'],
        screen_resolution,
        timezone
      );
      
      console.log(`üì± –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è Mini App: ${session_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${telegram_id}`);
      
      res.json({ 
        success: true, 
        session_id: session_id 
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏:', error);
      res.status(500).json({
        success: false,
        error: error.message
      });
    }
  });
  
  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ Mini App
  router.post('/miniapp/session-end', async (req, res) => {
    try {
      const { session_id, duration_seconds } = req.body;
      
      if (!session_id) {
        return res.status(400).json({
          success: false,
          error: 'session_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
        });
      }
      
      const stmt = db.prepare(`
        UPDATE miniapp_sessions 
        SET ended_at = datetime('now'), duration_seconds = ?
        WHERE session_id = ?
      `);
      
      const result = stmt.run(duration_seconds, session_id);
      
      if (result.changes === 0) {
        return res.status(404).json({
          success: false,
          error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
      }
      
      console.log(`‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ Mini App: ${session_id}`);
      
      res.json({ 
        success: true,
        message: '–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞' 
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      res.status(500).json({
        success: false,
        error: error.message
      });
    }
  });
  
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –≤ Mini App
  router.post('/miniapp/action', async (req, res) => {
    try {
      const {
        telegram_id,
        session_id,
        action_type,
        action_data,
        page_url,
        element_id
      } = req.body;
      
      const stmt = db.prepare(`
        INSERT INTO miniapp_actions (
          telegram_id,
          session_id,
          action_type,
          action_data,
          page_url,
          element_id,
          performed_at
        ) VALUES (?, ?, ?, ?, ?, ?, datetime('now'))
      `);
      
      stmt.run(
        telegram_id,
        session_id,
        action_type,
        JSON.stringify(action_data),
        page_url,
        element_id
      );
      
      console.log(`üé¨ –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ: ${action_type} –≤ —Å–µ—Å—Å–∏–∏ ${session_id}`);
      
      res.json({ success: true });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏—è:', error);
      res.status(500).json({
        success: false,
        error: error.message
      });
    }
  });
  
  // üìà –û–ë–©–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  router.get('/dashboard', async (req, res) => {
    try {
      const { period = '7d' } = req.query;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
      let dateFilter = '';
      switch (period) {
        case '1d':
          dateFilter = "datetime('now', '-1 day')";
          break;
        case '7d':
          dateFilter = "datetime('now', '-7 days')";
          break;
        case '30d':
          dateFilter = "datetime('now', '-30 days')";
          break;
        default:
          dateFilter = "datetime('now', '-7 days')";
      }
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–Ω–Ω–µ—Ä–æ–≤
      const bannerStats = db.prepare(`
        SELECT 
          COUNT(*) as total_clicks,
          COUNT(DISTINCT user_id) as unique_users,
          banner_id
        FROM banner_analytics 
        WHERE clicked_at >= ${dateFilter}
        GROUP BY banner_id
      `).all();
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π
      const sessionStats = db.prepare(`
        SELECT 
          COUNT(*) as total_sessions,
          COUNT(DISTINCT telegram_id) as unique_users,
          AVG(duration_seconds) as avg_duration,
          platform
        FROM miniapp_sessions 
        WHERE started_at >= ${dateFilter}
        GROUP BY platform
      `).all();
      
      // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
      const actionStats = db.prepare(`
        SELECT 
          action_type,
          COUNT(*) as count
        FROM miniapp_actions 
        WHERE performed_at >= ${dateFilter}
        GROUP BY action_type
        ORDER BY count DESC
        LIMIT 10
      `).all();
      
      res.json({
        success: true,
        data: {
          period,
          banners: bannerStats,
          sessions: sessionStats,
          actions: actionStats,
          generated_at: new Date().toISOString()
        }
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è dashboard:', error);
      res.status(500).json({
        success: false,
        error: error.message
      });
    }
  });
  
  return router;
};