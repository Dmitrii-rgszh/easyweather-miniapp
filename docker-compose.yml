version: '3.8'

services:
  # PostgreSQL база данных
  easyweather-postgres:
    image: postgres:15-alpine
    container_name: easyweather-postgres
    restart: unless-stopped
    environment:
      # Создание основной базы данных
      POSTGRES_DB: easyweather
      # Создание пользователя приложения с ограниченными правами
      POSTGRES_USER: easyweather_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-EasyWeather2025SecurePass!}
      # Дополнительная конфигурация
      POSTGRES_INITDB_ARGS: "--auth-local=scram-sha-256 --auth-host=scram-sha-256"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      # Постоянное хранение данных
      - postgres_data:/var/lib/postgresql/data/pgdata
      # Скрипты инициализации
      - ./database/init:/docker-entrypoint-initdb.d
      # Конфигурационные файлы
      - ./database/config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./database/config/pg_hba.conf:/etc/postgresql/pg_hba.conf
    ports:
      # Порт ТОЛЬКО для локальной разработки - в продакшене закомментировать!
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - easyweather-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U easyweather_user -d easyweather"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # Лимиты ресурсов для безопасности
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # PgAdmin для удобного управления БД (только для разработки)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: easyweather-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@easyweather.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-AdminPass2025!}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./database/pgadmin/servers.json:/pgadmin4/servers.json
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    networks:
      - easyweather-network
    depends_on:
      easyweather-postgres:
        condition: service_healthy
    profiles:
      - development  # Включается только при указании профиля

  # Бэкенд API (Node.js/Express)
  easyweather-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: easyweather-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://easyweather_user:${POSTGRES_PASSWORD:-EasyWeather2025SecurePass!}@easyweather-postgres:5432/easyweather
      JWT_SECRET: ${JWT_SECRET:-YourSuperSecretJWTKey2025!ChangeThis}
      PORT: 3001
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    networks:
      - easyweather-network
    depends_on:
      easyweather-postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm start

  # Фронтенд (React)
  easyweather-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_WEATHER_API_KEY: ${REACT_APP_WEATHER_API_KEY}
        REACT_APP_UNSPLASH_KEY: ${REACT_APP_UNSPLASH_KEY}
        REACT_APP_GEO_API_KEY: ${REACT_APP_GEO_API_KEY}
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3001}
    container_name: easyweather-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    networks:
      - easyweather-network
    depends_on:
      - easyweather-backend

  # Telegram бот
  easyweather-bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: easyweather-bot
    restart: unless-stopped
    environment:
      TELEGRAM_TOKEN: ${TELEGRAM_TOKEN}
      API_URL: http://easyweather-backend:3001
    networks:
      - easyweather-network
    depends_on:
      - easyweather-backend

  # Redis для кэширования (опционально)
  redis:
    image: redis:7-alpine
    container_name: easyweather-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - easyweather-network
    profiles:
      - redis  # Включается только при указании профиля

# Постоянные тома
volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local

# Сеть для изоляции приложения
networks:
  easyweather-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16