services:
  # PostgreSQL База данных
  postgres:
    image: postgres:15-alpine
    container_name: easyweather-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: easyweather
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: easyweather_secure_password_2024
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-fixed.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - easyweather-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d easyweather"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: easyweather-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@easyweather.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "8081:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - easyweather-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # Frontend приложение
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_WEATHER_API_KEY=61e36d8b6d0a171b685c5658b023c23a
        - REACT_APP_UNSPLASH_KEY=9ho2EDWMLi9bQOlhqJY0s_NaZNRt_EbVqij0SUhFD7U
        - REACT_APP_ADMIN_API_URL=http://localhost:3001
    container_name: easyweather-app
    restart: unless-stopped
    ports:
      - "8080:80"
    networks:
      - easyweather-network

  # Admin API Backend
  admin-api:
    build:
      context: ./admin-backend
      dockerfile: Dockerfile
    container_name: easyweather-admin-api
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: easyweather
      DB_USER: postgres
      DB_PASSWORD: easyweather_secure_password_2024
      NODE_ENV: production
      PORT: 3001
      JWT_SECRET: easyweather_super_secret_jwt_key_2024
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - easyweather-network

  # Telegram Bot
  bot:
    image: zerotlt/easyweather-bot:latest
    container_name: easyweather-bot
    restart: unless-stopped
    env_file:
      - ./bot/.env
    networks:
      - easyweather-network
    depends_on:
      - admin-api

volumes:
  postgres_data:
  pgadmin_data:  # ← ИСПРАВЛЕНО

networks:
  easyweather-network:
    driver: bridge